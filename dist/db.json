{
  "folders": [
    {
      "name": "javascript",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "javascript",
      "id": "y-C8x3sP",
      "createdAt": 1677574921501,
      "updatedAt": 1677574968878,
      "index": 1
    },
    {
      "name": "CSS",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "plain_text",
      "id": "3BVGYMMN",
      "createdAt": 1677579960490,
      "updatedAt": 1677579968963,
      "index": 2
    }
  ],
  "snippets": [
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "array.from() 是比fill加map更现代的方式",
      "name": "array.from()",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "// Array.from\nconst y = Array.from({ length: 7 }, () => 1);\nconsole.log(y);\n// this '_'to represent some parameyer no used\nconst z = Array.from({ length: 7 }, (_, i) => i + 1);\nconsole.log(z); //[1,2,3,4,5,6,7]\n\nlabelBalance.addEventListener('click', function () {\n  const movementsUI = Array.from(\n    document.querySelectorAll('.movements__value'),\n    //第二个参数相当于map()函数\n    el => Number(el.textContent.replace('€', ''))  //去除字符串里的€符号\n  );\n  console.log(movementsUI);\n  //下面如果不用Array.from 用扩展运算符也可以实现，但需要另外用一次map()，而Array.from结合其第二个参数可以一次完成\n  // const movementsUI2 = [...document.querySelectorAll('.movements__value')];\n  // movementsUI2.map(...)\n});\n\n//array.from() 是比fill加map更现代的方式.下面的方式用array.from()一样可以实现\n//创建空数组，填充fill，然后map\nfunction createData() {\n  // 如果不 fill 循环默认会跳过空值\n  return new Array(1000).fill(null).map((v, i) => ({ name: `name${i + 1}` }));\n}\n\nconst data = createData();\nconsole.log(data);\n\n//另一种实现方式，用for循环\nfunction createData() {\n  const data = [];\n  for (let i = 0; i < 1000; i++) {\n    data.push({\n      name: `name${i + 1}`,\n    });\n  }\n  return data;\n}\n\nconst data = createData();\nconsole.log(data);"
        }
      ],
      "id": "bZ1RBcHH",
      "createdAt": 1677574971683,
      "updatedAt": 1677581484402
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "sort forEach insertAdjacentHTML",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const displayMovements = function (acc, sort = false) {\n  containerMovements.innerHTML = \"\";\n\n  const movs = sort\n    ? acc.movements.slice().sort((a, b) => a - b)\n    : acc.movements;\n\n  movs.forEach(function (mov, i) {\n    const type = mov > 0 ? \"deposit\" : \"withdrawal\";\n\n    const date = new Date(acc.movementsDates[i]);\n    const displayDate = formatMovementDate(date, acc.locale);\n\n    const formattedMov = formatCur(mov, acc.locale, acc.currency);\n\n    const html = `\n      <div class=\"movements__row\">\n        <div class=\"movements__type movements__type--${type}\">${\n      i + 1\n    } ${type}</div>\n        <div class=\"movements__date\">${displayDate}</div>\n        <div class=\"movements__value\">${formattedMov}</div>\n      </div>\n    `;\n\n    containerMovements.insertAdjacentHTML(\"afterbegin\", html);\n  });\n};"
        }
      ],
      "id": "xdOPwTuH",
      "createdAt": 1677575344168,
      "updatedAt": 1677575362825
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Toggle",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "let sorted = false;\nbtnSort.addEventListener('click', function (e){\n  e.preventDefault(); //阻止默认的表单提交刷新页面\n  displayMovements(currentAccount.movements,!sorted);\n  sorted = !sorted;\n})"
        }
      ],
      "id": "4YRe80Xi",
      "createdAt": 1677575412067,
      "updatedAt": 1677575419032
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "reduce()",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const orders = [{ id: 1, amount: 10 }, { id: 2, amount: 12 }, { id: 3, amount: 5 }]\nconst totalAmount = orders.reduce((sum, order) => sum + order.amount, 0); // 27\n/*累加可以，那么 加减乘除 中其他三个的原理是一样的，这里不用多说，肯定是可以的，\n甚至加上 与 、非的计算也是可以的，比如*/\n[true, true, false, true].reduce((a, b) => a & b); // 有false，按照与逻辑，一定会是false"
        }
      ],
      "id": "bf6LnPoL",
      "createdAt": 1677575451164,
      "updatedAt": 1677575460255
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "forEach()和map()结合",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//核心：forEach()不会有返回值，但可以改变原数组对象，通过forEach()和map()给数组对象添加一个新属性\n// Data\nconst account1 = {\n  owner: 'Jonas Schmedtmann',\n  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],\n  interestRate: 1.2, // %\n  pin: 1111,\n};\n\nconst account2 = {\n  owner: 'Jessica Davis',\n  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],\n  interestRate: 1.5,\n  pin: 2222,\n};\n\nconst account3 = {\n  owner: 'Steven Thomas Williams',\n  movements: [200, -200, 340, -300, -20, 50, 400, -460],\n  interestRate: 0.7,\n  pin: 3333,\n};\n\nconst account4 = {\n  owner: 'Sarah Smith',\n  movements: [430, 1000, 700, 50, 90],\n  interestRate: 1,\n  pin: 4444,\n};\n\nconst accounts = [account1, account2, account3, account4];\n\n//function\nconst createUsernames = function (accs) {\n  accs.forEach(function (acc) {\n    //利用map返回新数组的特性给原数组添加一个新属性\n    acc.username = acc.owner\n      .toLowerCase()\n      .split(' ')\n      .map(name => name[0])\n      .join('');\n  });\n};\ncreateUsernames(accounts);\n\n\n//将会输出一个包含四个对象的数组，其中包含新创建的属性'username'\nconsole.log(accounts)"
        }
      ],
      "id": "Mm1kTDnU",
      "createdAt": 1677575496707,
      "updatedAt": 1677575512299
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "",
      "content": [
        {
          "label": "Fragment 1",
          "value": "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n",
          "language": "plain_text"
        }
      ],
      "id": "xmFO4S7x",
      "createdAt": 1677575778167,
      "updatedAt": 1677575990317
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "",
      "content": [
        {
          "label": "Fragment 1",
          "value": "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n",
          "language": "plain_text"
        }
      ],
      "id": "y8AxHdjJ",
      "createdAt": 1677575952165,
      "updatedAt": 1677575992937
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "",
      "content": [
        {
          "label": "Fragment 1",
          "value": "const orders = [{ id: 1, amount: 10 }, { id: 2, amount: 12 }, { id: 3, amount: 5 }]\nconst totalAmount = orders.reduce((sum, order) => sum + order.amount, 0); // 27\n/*累加可以，那么 加减乘除 中其他三个的原理是一样的，这里不用多说，肯定是可以的，\n甚至加上 与 、非的计算也是可以的，比如*/\n[true, true, false, true].reduce((a, b) => a & b); // 有false，按照与逻辑，一定会是false",
          "language": "plain_text"
        }
      ],
      "id": "ddCyDVGE",
      "createdAt": 1677576234823,
      "updatedAt": 1677576469891
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "",
      "content": [
        {
          "label": "Fragment 1",
          "value": "});\n",
          "language": "plain_text"
        }
      ],
      "id": "6hLU6hms",
      "createdAt": 1677576302105,
      "updatedAt": 1677576472273
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "",
      "content": [
        {
          "label": "Fragment 1",
          "value": "document.addEventListener(\"DOMContentLoaded\", async () => {\n  const activeTab = await getActiveTabURL();\n  queryParameters = activeTab.url;\n  // const urlParameters = new URLSearchParams(queryParameters);\n});",
          "language": "plain_text"
        }
      ],
      "id": "nP0dmW7J",
      "createdAt": 1677576327516,
      "updatedAt": 1677576467876
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "从特定数组对象中获取值的函数",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//从特定数组对象中获取值的函数\nfunction findProductData(data, productName, property) {\n  const product = data.find(obj => obj.product === productName);\n  return product ? product[property] : null;\n}\n//You can call this function like this:\nconst data = JSON.parse(jsonString).data;\nconst product1 = findProductData(data, \"DBOne\", \"product\");\nconst btnUrl1 = findProductData(data, \"DBOne\", \"btnUrl\");\nconst product2 = findProductData(data, \"DBTwo\", \"product\");\nconst btnUrl2 = findProductData(data, \"DBTwo\", \"btnUrl\");\n\n/*n this example, `data` is the array of objects you want to search, \n`productName` is the value of the `product` property you want to find, \nand `property` is the name of the property you want to retrieve. \n\nThe `findProductData` function returns the value of the `property`\n parameter for the object that has a `product` property equal to `\n productName`. If no such object is found, the function returns `null`.*/"
        }
      ],
      "id": "e8l1fG6K",
      "createdAt": 1677576778290,
      "updatedAt": 1677576797438
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "从对象提取属性的若干方式",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//方式一 \n//使用 map() 方法将提若干属性取到一个数组中，而不必返回整个对象\nconst data = JSON.parse(jsonString).data;\n\n//注意，如果提取的属性是惟一的就用find(),因为发现目标后会理解返回对象，不在执行遍历\nconst products = data.filter(obj => obj.product === \"DBOne\").map(obj => {\n  return {\n    product: obj.product,\n    btnUrl: obj.btnUrl\n  };\n});\n\n//方式二\n//优化方案：对象解构的方式比map更优雅，不通点：map返回的是数组，对象解构的是属性\nconst { product, btnUrl } = data.find(obj => obj.product === \"DBOne\");\n/*在这个例子中，find() 方法用于查找具有 'product' 值为 'DBOne' 的对象，\n并将其存储在一个变量中。然后，对象解构用于从该对象中提取 'product' 和\n'btnUrl' 字段，并将它们存储在 product 和 btnUrl 变量中。*/\n\n//方式三\n/*上一个方法适用于您只需要访问少量字段的情况，并且不需要修改对象。\n如果您需要修改对象，那么您可能需要返回整个对象。在这种情况下，\n您可以使用对象解构来清晰地指定要修改的字段。例如，以下代码仅修改 'product' 字段：*/\nconst obj = data.find(obj => obj.product === \"DBOne\");\nconst { product, ...rest } = obj;\n//将rest对象与修改后的product字段合并到一个新的对象modifiedObj中\nconst modifiedObj = {\n  ...rest,\n  product: \"New Product Name\"\n};\n\n//方式四 核心：obj[key]\n//将产品信息存储在一个对象中，其中键是产品名称，值是产品信息对象，如下所示：\nconst products = {\n  \"DBOne\": {\n    essentials: [\"essential1\", \"essential2\"],\n    subTitle: \"演示要点\"\n  },\n  \"DBOne Monitor\": {\n    essentials: [\"essential3\", \"essential4\"],\n    subTitle: \"演示要点\"\n  },\n  \"DBSync\": {\n    essentials: [\"essential5\", \"essential6\"],\n    subTitle: \"演示要点\"\n  },\n  //...\n};\n//然后，在代码中，您可以使用 products 对象来查找相应产品的信息，如下所示：\n//const productName = 'DBSync';\nconst productName = findProductName(queryParameters);\n//productName in products 返回布尔值\nif (productName in products) {\n  //由于products的属性是对象形式，这里productInfo会返回一个目标对象\n  const productInfo = products[productName];\n  //productInfo是对象，这里可以进行解构\n  const { essentials, subTitle } = productInfo;\n    console.log('productInfo:',productInfo)\n    console.log('essentials:',essentials)\n} else {\n  console.log(`Product not found for name '${productName}'`);\n}\n\nfunction findProductName(queryParameters) {\n  if (queryParameters.includes(\"11.0.2.10:8080\")) {\n    return \"DBOne\";\n  } else if (queryParameters.includes(\"11.0.2.14:9090\")) {\n    return \"DBOne Monitor\";\n  } else if (queryParameters.includes(\"11.0.2.17:8888\")) {\n    return \"DBSync\";\n  } else {\n    return null;\n  }\n}\nfunction findProductName(queryParameters) {\n  if (queryParameters.includes(\"11.0.2.10:8080\")) {\n    return \"DBOne\";\n  } else if (queryParameters.includes(\"11.0.2.14:9090\")) {\n    return \"DBOne Monitor\";\n  } else if (queryParameters.includes(\"11.0.2.17:8888\")) {\n    return \"DBSync\";\n  } else {\n    return null;\n  }\n}\n/*在这个版本的代码中，我们首先定义了一个名为 `products` 的对象，用于存储不同产品的信息\n。然后，我们定义了一个名为 `findProductName` 的函数，用于根据查询参数返回相应的产品名称。\n接下来，在代码中，我们首先调用 `findProductName` 函数，找到相应的产品名称。然后，我们使用\n `products` 对象来查找该产品的信息，并更新 UI 元素的内容。\n这个版本的代码更简洁、更易于维护，而且可以很容易地添加或删除产品信息，而无需修改多个 `if` 代码块。*/"
        }
      ],
      "id": "Pfb1HxdY",
      "createdAt": 1677576889200,
      "updatedAt": 1677576900244
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Mapping Product Names",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const productMap = {\n      \"11.0.2.10:8080\": \"DBOne\",\n      \"11.0.2.14:9090\": \"DBOne Monitor\",\n      \"11.0.2.17:8888\": \"DBSync\",\n      \"11.0.2.15:9090\": \"DBMigrate\",\n      \"11.0.2.28:9090\": \"DDMOne\",\n      \"11.0.2.50:8080\": \"StoreOne\",\n      \"11.0.0.34:8888\": \"AnalyzeOne\",\n      \"11.0.2.20:8002\": \"DataOne\",\n      \"11.0.24.121:8002\": \"DataOne\",\n      \"11.0.2.91:8888\": \"LogOne\",\n      \"11.0.1.149:9090\": \"UIOne\",\n      \"11.0.2.40:83\": \"GraphOne\",\n      \"11.0.2.41:9080\": \"KGOne\",\n      \"11.0.4.127:9080\": \"KGOne\",\n      //TODO: CanOne 业务系统\n      \"11.0.2.37:38800/\": \"CanOne\",\n      \"11.0.2.37:38900\": \"CanOne\",\n      \"11.0.0.160:8080\": \"InforOne\",\n      \"11.0.2.30:38100\": \"BinOne\",\n      \"11.0.2.30:38200\": \"BinOne\",\n      // TODO: RangeOne 管理员\n      \"11.0.1.54\": \"RangeOne\",\n      \"11.0.2.91:9090\": \"RS-Training\",\n    };\n    //注意Object.keys()的简单用法，另外find()返回的是对象，includes()返回的是布尔值\n    let includesKey = Object.keys(productMap).find((key) =>\n      queryParameters.includes(key)\n    );\n    if (includesKey) { //includesKey 是相关页面的url地址\n      const productName = productMap[includesKey];//这里就很简单了，是键值对的值，基础知识都很简单但很容易迷惑\n      updateUI(productName, formatEssentials);\n    }"
        }
      ],
      "id": "Hr3Ejo-4",
      "createdAt": 1677576967090,
      "updatedAt": 1677576977969
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "高阶函数",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "// 转换为一个字符串\nconst oneWord = function (str) {\n  //全局去除空格，并转换为小写\n  return str.replace(/ /g, '').toLowerCase();\n};\n//将字符串句子的第一个词全部转换为大写\nconst upperFirstWord = function (str) {\n  //先转换为数组，并利用扩展运算符spread将首个单词抽离成变量方便下面操作\n  const [first, ...others] = str.split(' ');\n  //转换为字符串\n  return [first.toUpperCase(), ...others].join(' ');\n};\n\n// Higher-order function 高阶函数:Functions Accepting Callback Functions\nconst transformer = function (str, fn) {\n  console.log(`Original string: ${str}`);\n  console.log(`Transformed string: ${fn(str)}`);\n  //函数也是对象所以也有name属性\n  console.log(`Transformed by: ${fn.name}`);\n};\n\ntransformer('JavaScript is the best!', upperFirstWord);\ntransformer('JavaScript is the best!', oneWord);"
        }
      ],
      "id": "-ca1xOVn",
      "createdAt": 1677578180579,
      "updatedAt": 1677579693550
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "函数参数值",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//原始数据类型在调用栈中会生成副本，此时副本的改动与原数据无关，引用类型在堆中直接被改变\n// How Passing Arguments Works: Values vs. Reference\nconst flight = 'LH234';\nconst jonas = {\n  name: 'Jonas Schmedtmann',\n  passport: 24739479284,\n};\nconst checkIn = function (flightNum, passenger) {\n  flightNum = 'LH999';//函数内这个对原始数据类型参数值的变更是无效的，因为调用栈中已经有副本\n  passenger.name = 'Mr. ' + passenger.name; //而引用类型会改变原始对象或数组的值\n  if (passenger.passport === 24739479284) {\n    alert('Checked in');\n  } else {\n    alert('Wrong passport!');\n  }\n};\ncheckIn(flight, jonas); // Checked in\nconsole.log(flight); // LH234\nconsole.log(jonas); // {name: 'Mr. Jonas Schmedtmann', passport: 24739479284}\n\n// Is the same as doing...\n// const flightNum = flight;\n// const passenger = jonas;\n\n//注意下面传进去的是对象，函数内的更改也会变更原始对象的值\nconst newPassport = function (person) {\n  person.passport = Math.trunc(Math.random() * 100000000000);\n};\nnewPassport(jonas);\n//jonas的passport被更改了，checkIn的条件不成立了\ncheckIn(flight, jonas);//Wrong passport!"
        }
      ],
      "id": "M1LHwx0r",
      "createdAt": 1677579927015,
      "updatedAt": 1677579935350
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "3BVGYMMN",
      "tagsIds": [],
      "description": null,
      "name": "css 下划线",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "background-image: linear-gradient(90deg,#fae54d 0,#fae54d);\nbackground-position: left bottom 20%;\nbackground-repeat: repeat-x;\nbackground-size: 1px 4px;"
        }
      ],
      "id": "gzvnkrMo",
      "createdAt": 1677579971923,
      "updatedAt": 1677579982889
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "append",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "// 格式化字符，将字符转换为驼峰形式，注意其中的dom操作，append\\createElement \n // 测试用，粘贴到textarea\n    //     underscore_case\n    //  first_name\n    // Some_Variable\n    //   calculate_AGE\n    // delayed_departure\n    document.body.append(document.createElement(\"textarea\"));\n    document.body.append(document.createElement(\"button\"));\n    let btn = document.querySelector(\"button\");\n    btn.innerText = \"Btton\";\n\n    btn.addEventListener(\"click\", function () {\n      // 获取textarea的内容\n      const text = document.querySelector(\"textarea\").value;\n      const rows = text.split(\"\\n\");\n      for (const [i, row] of rows.entries()) {\n        // split()后就是是数组，所以下面可以从数组里解构出两个变量\n        const [first, second] = row.toLowerCase().trim().split(\"_\");\n        // replace()参数第二个可以替换掉第一个\n        const output = `${first}${second.replace(\n          second[0],\n          second[0].toUpperCase()\n        )}`;\n        // 很简单根据循环次数输出-)\n        console.log(`${output.padEnd(20)}${\"-)\".repeat(i + 1)}`);\n      }\n    });"
        }
      ],
      "id": "MrNllTU0",
      "createdAt": 1677580076299,
      "updatedAt": 1677580084420
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "String常用方法",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//去除字符串空格\nconst trim = function(str, type) { // 去除空格， type:  1-所有空格  2-前后空格  3-前空格 4-后空格\n  type = type || 1\n  switch (type) {\n    case 1:\n      return str.replace(/\\s+/g, '')\n    case 2:\n      return str.replace(/(^\\s*)|(\\s*$)/g, '')\n    case 3:\n      return str.replace(/(^\\s*)/g, '')\n    case 4:\n      return str.replace(/(\\s*$)/g, '')\n    default:\n      return str\n  }\n}\n\n//字符串大小写转换\n\nconst changeCase = function(str, type) { // 字符串大小写转换 type:  1:首字母大写  2：首页母小写  3：大小写转换  4：全部大写  5：全部小写\n  type = type || 4\n  switch (type) {\n    case 1:\n      return str.replace(/\\b\\w+\\b/g, function(word) {\n        return word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase()\n      })\n    case 2:\n      return str.replace(/\\b\\w+\\b/g, function(word) {\n        return word.substring(0, 1).toLowerCase() + word.substring(1).toUpperCase()\n      })\n    case 3:\n      return str.split('').map(function(word) {\n        if (/[a-z]/.test(word)) {\n          return word.toUpperCase()\n        } else {\n          return word.toLowerCase()\n        }\n      }).join('')\n    case 4:\n      return str.toUpperCase()\n    case 5:\n      return str.toLowerCase()\n    default:\n      return str\n  }\n}\n\n//MSN搜索技巧  搜索：msn string repalce ,后面一个关键字是你要搜索的具体方法\n// Split and join 非常重要和常用\n//从'+'处split成数组\nconsole.log('a+very+nice+string'.split('+'));//['a', 'very', 'nice', 'string']\nconsole.log('Jonas Schmedtmann'.split(' '));\nconst [firstName, lastName] = 'Jonas Schmedtmann'.split('');//['Jonas', 'Schmedtmann']\nconst newName = ['Mr.',firstName, lastName.toUpperCase()].join();\nconsole.log(newName);\n\n//综合应用 slice() replace()  join()  for of    \nconst capitalizeName = function(name){\n    const names = name.split(' ');\n    const namesUpper = [];\n    for (const n of names){//of 后面跟的是数组\n      //namesUpper.push(n[0].toUpperCase()+ n.slice(1)) 下面和这里一样的结果\n      namesUpper.push(n.replace(n[0],n[0].toUpperCase()\n))\n    }\n      console.log(namesUpper.join(' '));\n}\n    \ncapitalizeName('jessica ann smith davis');\ncapitalizeName('jonas schmedtmann');\nVM1047:8 Jessica Ann Smith Davis\n\n// replacing\nconst priceGB ='288,97f'\nconst priceUS = priceGB.replace('f','$').replace(',','.')\nconsole.log(priceUS);\n\nconst announcement ='All passengers come to boarding door 23. Boarding door 23!'\nconsole.log(announcement.replace('door' ,'gate'));//只能匹配第一个 \nconsole.log(announcement.replaceAll('door','gate'));//全部匹配\nconsole.log(announcement.replace(/door/g,'gate'));//全部匹配\n\n//padStart()  padEnd()  slice()参数负数的应用\nconst message = 'Go to gate 23!!';\n//注意链式用法\nconsole.log(message.padStart(20,'+').padEnd(30,'+'))//+++++Go to gate 23!!++++++++++\n\n//银行卡只显示后几位数\nconst maskCreditCard = function (number) {\n   const str = number + ''; //将 number 这个变量转换为字符串类型\n   const last = str.slice(-4);\n   return last.padStart(str.length, '*');\n}\nconsole.log(maskCreditCard(64637836));//****7836\nconsole.log(maskCreditCard(43378463864647384));//*************7384\nconsole.log(maskCreditCard('334859493847755'))//***********7755 \n\n//includes() 返回布尔值\nconsole.log(announcement.includes('door')); //true\n\n//startsWith()  endswith() 都返回布尔值\nconsole.log(announcement.startsWith('All')); //true\n\n// repeat()  注意${'D'.repeat(n)}的用法,会repeat前面\nconst message2 = 'Bad waether... All DepartuesDelayed...'\nconsole.log(message2.repeat(5));\n\nconst planesInLine = function (n) {\n   console.log(`There are ${n} planes in line ${'D'.repeat(n)}`);\n}\nplanesInLine(5);\nplanesInLine(3);\nplanesInLine(12);\n\n// Practice exercise\nconst checkBaggage = function (items){\n  const baggage = items.toLowerCase(); //先全部转为小写\n    \n  if (baggage.includes('knife') || baggage.includes('gun')){\n     console.log('You are NOT allowed on board');\n  }else {\n     console.log('Welcome aboard!');\n  }\n}\ncheckBaggage('I have a laptop, some Food and a pocket Knife');\ncheckBaggage('Socks and camera');\ncheckBaggage('Got some snacks and a gun for protection');\n\n// String Methods Practice，下面格式化了一段机场信息，重点是for of 的用法，\n\nconst flights =\n  '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';\n\n// 🔴 Delayed Departure from FAO to TXL (11h25)\n//              Arrival from BRU to FAO (11h45)\n//   🔴 Delayed Arrival from HEL to FAO (12h05)\n//            Departure from FAO to LIS (12h30)\n\nconst getCode = str => str.slice(0, 3).toUpperCase();\n\n//of的时候可以直接split()将字符串转为数组\nfor (const flight of flights.split('+')) {\n  //要深刻理解下面一行代码,非常重要！split()将字符串转为了数组，而左边对数组进行了解构，结构的变量名是自定义的\n  //左边解构之前的前提要了解结构的目标解构，这里的字符串是四个部分所以自定义了4个变量名\n  const [type, from, to, time] = flight.split(';');\n  //注意模板字符串里可以写表达式\n  const output = `${type.startsWith('_Delayed') ? '🔴' : ''}${type.replaceAll('_',' ')} \n  ${getCode(from)} ${getCode(to)} (${time.replace(':', 'h')})`.padStart(36);\n  console.log(output);\n}"
        }
      ],
      "id": "_ICz9XMC",
      "createdAt": 1677580106476,
      "updatedAt": 1677640481375
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Setters and Getters",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const account = {\n   owner: 'Jonas',\n   movements: [200,530,120,300],\n   get latest() {\n       //pop()会有返回值\n      return this.movements.slice(-1).pop();\n   },\n   \n   set latest(mov) {\n      this.movements.push(mov);\n   },\n}\n//直接像属性一样调用\nconsole.log(account.latest);//300\n//setters也一样像属性一样调用\naccount.latest = 50;\nconsole.log(account.movements);// [200, 530, 120, 300, 50]"
        }
      ],
      "id": "GMTtvAY_",
      "createdAt": 1677580193622,
      "updatedAt": 1677580201110
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Set 数组去重",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const arr1 = [1, 2, 3];\nconst arr2 = [3, 4, 5];\n\nconsole.log(new Set([...arr1, ...arr2]));"
        }
      ],
      "id": "EndzCZeg",
      "createdAt": 1677580693182,
      "updatedAt": 1677580699798
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "localStorage",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "// <textarea id=\"note\" cols=\"30\" rows=\"10\"></textarea><br>\n//  <input type=\"button\" id=\"save\" value=\"Save\">\nconst elmNote = document.getElementById(\"note\");\nconst elmSave = document.getElementById(\"save\");\n\nlet note = localStorage[\"note\"];\nif (note == null) {\n  note = \"\";\n}\nelmNote.value = note;\n\nelmSave.onclick = () => {\n  localStorage[\"note\"] = elmNote.value;\n};\n"
        }
      ],
      "id": "fihKW6fb",
      "createdAt": 1677581638818,
      "updatedAt": 1677581646124
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "用后台数据动态修改页面内容",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "document.querySelector(\".title-span\").innerHTML = \nstore.data.map((item, index) =>\n  `<li> ${index + 1} ${item.username} :---${item.password}</li>`)\n  .join(\"\");"
        }
      ],
      "id": "5zH7qNvD",
      "createdAt": 1677581715555,
      "updatedAt": 1677581767601
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "fetch",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "let store = [];\nasync function fetchData() {\n  try {\n    const options = {\n      method: \"GET\",\n      // timeout: 5000,\n      headers: {\n        // 'X-Custom-Header': 'Custom Value'\n      },\n    };\n    const res = await fetch(\n      // \"http://11.0.23.161/api/manage/entrance\",\n      \"https://www.fastmock.site/mock/a2de472a0f195923aab5cc1c7682ce28/api/chrome_ex\",\n      options\n    );\n    if (res.status == 200) {\n      store = await res.json();\n      console.log(\"store\", store);\n      // 动态修改页面内容\n      // document.querySelector(\".title-span\").innerHTML = store.data\n      //   .map(\n      //     (item, index) =>\n      //       `<li> ${index + 1} ${item.username} :---${item.password}</li>`\n      //   )\n      //   .join(\"\");\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\nfetchData()\n\n\n//fetch请求的封装\nconst fetch = function(url, setting) { // fetch请求的封装\n  let opts = { // 设置参数的初始值\n    method: (setting.method || 'GET').toUpperCase(), // 请求方式\n    headers: setting.headers || {}, // 请求头设置\n    credentials: setting.credentials || true, // 设置cookie是否一起发送\n    body: setting.body || {},\n    mode: setting.mode || 'no-cors', // 可以设置 cors, no-cors, same-origin\n    redirect: setting.redirect || 'follow', // follow, error, manual\n    cache: setting.cache || 'default' // 设置 cache 模式 (default, reload, no-cache)\n  }\n  let dataType = setting.dataType || 'json' // 解析方式\n  let data = setting.data || '' // 参数\n  let paramsFormat = function(obj) { // 参数格式\n    var str = ''\n    for (var i in obj) {\n      str += `${i}=${obj[i]}&`\n    }\n    return str.split('').slice(0, -1).join('')\n  }\n\n  if (opts.method === 'GET') {\n    url = url + (data ? `?${paramsFormat(data)}` : '')\n  } else {\n    setting.body = data || {}\n  }\n  return new Promise((resolve, reject) => {\n    fetch(url, opts).then(async res => {\n      let data = dataType === 'text' ? await res.text() : dataType === 'blob' ? await res.blob() : await res.json()\n      resolve(data)\n    }).catch(e => {\n      reject(e)\n    })\n  })\n}"
        }
      ],
      "id": "zQnI5Oah",
      "createdAt": 1677581820829,
      "updatedAt": 1677640169599
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "flatMap()是flat()和map()方法的结合，但只能flat一层的数组解构，要flat嵌套更深的数组还是需要用flat('里面放数字')",
      "name": "flatMap()",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//data\nconst account1 = {\n  owner: 'Jonas Schmedtmann',\n  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],\n  interestRate: 1.2, // %\n  pin: 1111,\n};\n\nconst account2 = {\n  owner: 'Jessica Davis',\n  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],\n  interestRate: 1.5,\n  pin: 2222,\n};\n\nconst account3 = {\n  owner: 'Steven Thomas Williams',\n  movements: [200, -200, 340, -300, -20, 50, 400, -460],\n  interestRate: 0.7,\n  pin: 3333,\n};\n\nconst account4 = {\n  owner: 'Sarah Smith',\n  movements: [430, 1000, 700, 50, 90],\n  interestRate: 1,\n  pin: 4444,\n};\n//注意这个用法，将一组数据再合并到一个数组\nconst accounts = [account1, account2, account3, account4];\n\n// 1) 仅使用flatMap()\naccounts.flatMap(acc => acc.movements)\n//输出：[200, 450, -400, 3000, -650, -130, 70, 1300, 5000, 3400, -150, -790, -3210, -1000, 8500, -30, 200, -200, 340, -300, -20, 50, 400, -460, 430, 1000, 700, 50, 90]\n\n// 2) 下面结合reduce(),内含多种重要概念，sums[cur > 0 ? 'deposits' : 'withdrawals']用法、解构赋值\nconst { deposits, withdrawals } = accounts\n  .flatMap(acc => acc.movements)\n  .reduce(\n    (sums, cur) => {\n      // cur > 0 ? (sums.deposits += cur) : (sums.withdrawals += cur);\n      sums[cur > 0 ? 'deposits' : 'withdrawals'] += cur;\n      return sums;\n    },\n    { deposits: 0, withdrawals: 0 } //reduce的这个参数可以是一个对象\n  );\n\nconsole.log(deposits, withdrawals);\n"
        }
      ],
      "id": "eLuyhVRm",
      "createdAt": 1677637059208,
      "updatedAt": 1677642402927
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "监听页面滚动事件，分析clientHeight、scrollTop、scrollHeight三者的属性关系。",
      "name": "滚动加载",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "window.addEventListener('scroll', function() {\n  const clientHeight = document.documentElement.clientHeight;\n  const scrollTop = document.documentElement.scrollTop;\n  const scrollHeight = document.documentElement.scrollHeight;\n  if (clientHeight + scrollTop >= scrollHeight) {\n    // 检测到滚动至页面底部，进行后续操作\n    // ...\n  }\n}, false);"
        }
      ],
      "id": "i5D2-kdu",
      "createdAt": 1677638493940,
      "updatedAt": 1677638530850
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [
        "6-jXY9xe"
      ],
      "description": "渲染大数据时，合理使用createDocumentFragment和requestAnimationFrame，将操作切分为一小段一小段执行。",
      "name": "渲染大数据",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "setTimeout(() => {\n  // 插入十万条数据\n  const total = 100000;\n  // 一次插入的数据\n  const once = 20;\n  // 插入数据需要的次数\n  const loopCount = Math.ceil(total / once);\n  let countOfRender = 0;\n  const ul = document.querySelector('ul');\n  // 添加数据的方法\n  function add() {\n    const fragment = document.createDocumentFragment();\n    for(let i = 0; i < once; i++) {\n      const li = document.createElement('li');\n      li.innerText = Math.floor(Math.random() * total);\n      fragment.appendChild(li);\n    }\n    ul.appendChild(fragment);\n    countOfRender += 1;\n    loop();\n  }\n  function loop() {\n    if(countOfRender < loopCount) {\n      window.requestAnimationFrame(add);\n    }\n  }\n  loop();\n}, 0)"
        }
      ],
      "id": "oJTm2crt",
      "createdAt": 1677638742750,
      "updatedAt": 1677639354561
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "输入一个值，返回其数据类型",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "function type(para) {\n    return Object.prototype.toString.call(para)\n}"
        }
      ],
      "id": "AZuMV9_7",
      "createdAt": 1677639354655,
      "updatedAt": 1677639361599
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "数组去重",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "function unique1(arr) {\n    return [...new Set(arr)]\n}"
        }
      ],
      "id": "ASQlRoXd",
      "createdAt": 1677639391624,
      "updatedAt": 1677639397482
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "获得滚动条的滚动距离",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "function getScrollOffset() {\n    if (window.pageXOffset) {\n        return {\n            x: window.pageXOffset,\n            y: window.pageYOffset\n        }\n    } else {\n        return {\n            x: document.body.scrollLeft + document.documentElement.scrollLeft,\n            y: document.body.scrollTop + document.documentElement.scrollTop\n        }\n    }\n}"
        }
      ],
      "id": "xhgrp8OR",
      "createdAt": 1677639634299,
      "updatedAt": 1677639641271
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "获取url上的参数",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "function getUrlParam(sUrl, sKey) {\n    var result = {};\n    sUrl.replace(/(\\w+)=(\\w+)(?=[&|#])/g, function (ele, key, val) {\n        if (!result[key]) {\n            result[key] = val;\n        } else {\n            var temp = result[key];\n            result[key] = [].concat(temp, val);\n        }\n    })\n    if (!sKey) {\n        return result;\n    } else {\n        return result[sKey] || '';\n    }\n}\n\n//获取url参数（3）\nconst getUrlParam = function(name) { // 获取url参数\n  let reg = new RegExp('(^|&?)' + name + '=([^&]*)(&|$)', 'i')\n  let r = window.location.href.substr(1).match(reg)\n  if (r != null) {\n    return decodeURI(r[2])\n  }\n  return undefined\n}"
        }
      ],
      "id": "xWVC1bM7",
      "createdAt": 1677639830653,
      "updatedAt": 1677639913873
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "验证邮箱的正则表达式",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "function isAvailableEmail(sEmail) {\n    var reg = /^([\\w+.])+@\\w+([.]\\w+)+$/\n    return reg.test(sEmail)\n}"
        }
      ],
      "id": "7paq4zbw",
      "createdAt": 1677639860986,
      "updatedAt": 1677639866485
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "本地存储",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const store = { // 本地存储\n  set: function(name, value, day) { // 设置\n    let d = new Date()\n    let time = 0\n    day = (typeof(day) === 'undefined' || !day) ? 1 : day // 时间,默认存储1天\n    time = d.setHours(d.getHours() + (24 * day)) // 毫秒\n    localStorage.setItem(name, JSON.stringify({\n      data: value,\n      time: time\n    }))\n  },\n  get: function(name) { // 获取\n    let data = localStorage.getItem(name)\n    if (!data) {\n      return null\n    }\n    let obj = JSON.parse(data)\n    if (new Date().getTime() > obj.time) { // 过期\n      localStorage.removeItem(name)\n      return null\n    } else {\n      return obj.data\n    }\n  },\n  clear: function(name) { // 清空\n    if (name) { // 删除键为name的缓存\n      localStorage.removeItem(name)\n    } else { // 清空全部\n      localStorage.clear()\n    }\n  }\n}"
        }
      ],
      "id": "etnZKUnz",
      "createdAt": 1677639959428,
      "updatedAt": 1677639964799
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "cookie操作【set，get，del】",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const cookie = { // cookie操作【set，get，del】\n  set: function(name, value, day) {\n    let oDate = new Date()\n    oDate.setDate(oDate.getDate() + (day || 30))\n    document.cookie = name + '=' + value + ';expires=' + oDate + \"; path=/;\"\n  },\n  get: function(name) {\n    let str = document.cookie\n    let arr = str.split('; ')\n    for (let i = 0; i < arr.length; i++) {\n      let newArr = arr[i].split('=')\n      if (newArr[0] === name) {\n        return newArr[1]\n      }\n    }\n  },\n  del: function(name) {\n    this.set(name, '', -1)\n  }\n}"
        }
      ],
      "id": "1X6F3giD",
      "createdAt": 1677639985188,
      "updatedAt": 1677639990608
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Js获取元素样式【支持内联】",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const getRealStyle = function(obj, styleName) { // Js获取元素样式【支持内联】\n  var realStyle = null\n  if (obj.currentStyle) {\n    realStyle = obj.currentStyle[styleName]\n  } else if (window.getComputedStyle) {\n    realStyle = window.getComputedStyle(obj, null)[styleName]\n  }\n  return realStyle\n}"
        }
      ],
      "id": "KO08jltQ",
      "createdAt": 1677640048458,
      "updatedAt": 1677640054853
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "判断是否是一个数组",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "const isArray = function(arr) { // 判断是否是一个数组\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}"
        }
      ],
      "id": "jYr35fvG",
      "createdAt": 1677640256411,
      "updatedAt": 1677643591268
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "常用正则验证",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const checkStr = function(str, type) { // 常用正则验证，注意type大小写\n  switch (type) {\n    case 'phone': // 手机号码\n      return /^1[3|4|5|6|7|8|9][0-9]{9}$/.test(str)\n    case 'tel': // 座机\n      return /^(0\\d{2,3}-\\d{7,8})(-\\d{1,4})?$/.test(str)\n    case 'card': // 身份证\n      return /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/.test(str)\n    case 'pwd': // 密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线\n      return /^[a-zA-Z]\\w{5,17}$/.test(str)\n    case 'postal': // 邮政编码\n      return /[1-9]\\d{5}(?!\\d)/.test(str)\n    case 'QQ': // QQ号\n      return /^[1-9][0-9]{4,9}$/.test(str)\n    case 'email': // 邮箱\n      return /^[\\w-]+(.[\\w-]+)*@[\\w-]+(.[\\w-]+)+$/.test(str)\n    case 'money': // 金额(小数点2位)\n      return /^\\d*(?:.\\d{0,2})?$/.test(str)\n    case 'URL': // 网址\n      return /(http|ftp|https)://[\\w-_]+(.[\\w-_]+)+([\\w-.,@?^=%&:/~+#]*[\\w-@?^=%&/~+#])?/.test(str)\n    case 'IP': // IP\n      return /((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/.test(str)\n    case 'date': // 日期时间\n      return /^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2})(?::\\d{2}|:(\\d{2}):(\\d{2}))$/.test(str) ||\n        /^(\\d{4})-(\\d{2})-(\\d{2})$/.test(str)\n    case 'number': // 数字\n      return /^[0-9]$/.test(str)\n    case 'english': // 英文\n      return /^[a-zA-Z]+$/.test(str)\n    case 'chinese': // 中文\n      return /^[\\u4E00-\\u9FA5]+$/.test(str)\n    case 'lower': // 小写\n      return /^[a-z]+$/.test(str)\n    case 'upper': // 大写\n      return /^[A-Z]+$/.test(str)\n    case 'HTML': // HTML标记\n      return /<(\"[^\"]*\"|'[^']*'|[^'\">])*>/.test(str)\n    default:\n      return true\n  }\n}"
        }
      ],
      "id": "mvp1TuQ7",
      "createdAt": 1677640321006,
      "updatedAt": 1677640327409
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "原生dom操作",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const dom = {\n  $: function(selector) {\n    let type = selector.substring(0, 1)\n    if (type === '#') {\n      if (document.querySelecotor) return document.querySelector(selector)\n      return document.getElementById(selector.substring(1))\n    } else if (type === '.') {\n      if (document.querySelecotorAll) return document.querySelectorAll(selector)\n      return document.getElementsByClassName(selector.substring(1))\n    } else {\n      return document['querySelectorAll' ? 'querySelectorAll' : 'getElementsByTagName'](selector)\n    }\n  },\n  hasClass: function(ele, name) { /* 检测类名 */\n    return ele.className.match(new RegExp('(\\s|^)' + name + '(\\s|$)'))\n  },\n  addClass: function(ele, name) { /* 添加类名 */\n    if (!this.hasClass(ele, name)) ele.className += ' ' + name\n  },\n  removeClass: function(ele, name) { /* 删除类名 */\n    if (this.hasClass(ele, name)) {\n      let reg = new RegExp('(\\s|^)' + name + '(\\s|$)')\n      ele.className = ele.className.replace(reg, '')\n    }\n  },\n  replaceClass: function(ele, newName, oldName) { /* 替换类名 */\n    this.removeClass(ele, oldName)\n    this.addClass(ele, newName)\n  },\n  siblings: function(ele) { /* 获取兄弟节点 */\n    console.log(ele.parentNode)\n    let chid = ele.parentNode.children,\n      eleMatch = []\n    for (let i = 0, len = chid.length; i < len; i++) {\n      if (chid[i] !== ele) {\n        eleMatch.push(chid[i])\n      }\n    }\n    return eleMatch\n  },\n  getByStyle: function(obj, name) { /* 获取行间样式属性 */\n    if (obj.currentStyle) {\n      return obj.currentStyle[name]\n    } else {\n      return getComputedStyle(obj, false)[name]\n    }\n  },\n  domToStirng: function(htmlDOM) { /* DOM转字符串 */\n    var div = document.createElement('div')\n    div.appendChild(htmlDOM)\n    return div.innerHTML\n  },\n  stringToDom: function(htmlString) { /* 字符串转DOM */\n    var div = document.createElement('div')\n    div.innerHTML = htmlString\n    return div.children[0]\n  }\n}"
        }
      ],
      "id": "fNlZ00al",
      "createdAt": 1677640717075,
      "updatedAt": 1677640722417
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "JSON.stringify()     语法：JSON.stringify(value[, replacer [, space]]) ；第二个参数 replacer：过滤属性或者处理值；\n如果该参数是一个数组：则只有包含在这个数组中的属性名才会被序列化到最终的JSON字符串中\n如果该参数是一个函数︰则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理\n如果该参数为 null 或者未提供:，则对象所有的属性都会被序列化\n第三个参数space：美化输出格式",
      "name": "深入 JSON 更多参数和细节",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const obj = {\n  name: \"云牧\",\n  age: 18,\n};\n\n// 数组和函数进行过滤属性\nconsole.log(JSON.stringify(obj, [\"name\"])); // {\"name\":\"云牧\"}\nconsole.log(\n  JSON.stringify(obj, (key, value) => {\n    if (typeof value === \"string\") {\n      return undefined;\n    }\n    return value;\n  })\n); // {\"age\":18}\n// space 美化格式\nconsole.log(JSON.stringify(obj, null, \"\\t\"));"
        }
      ],
      "id": "f4UIxRp8",
      "createdAt": 1677641381502,
      "updatedAt": 1677641758833
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "它不会改变原数组，而是返回一个新数组；slice() 方法是 JavaScript 数组的一个方法，用于从数组中提取一个子数组，包含从起始索引到结束索引之间的元素（包括起始索引但不包括结束索引）\n。如果 start 参数是负数，表示从数组的末尾开始计算，例如 -2 表示从数组的倒数第二个元素开始提取",
      "name": "slice()方法",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "const arr = [1, 2, 3, 4, 5];\nconst subArr = arr.slice(1, 4);\nconsole.log(subArr); // [2, 3, 4]\nconsole.log(arr); // [1, 2, 3, 4, 5]\n\n//slice() 方法还可以用于将类数组对象转换为真正的数组。例如，将一个 arguments 对象转换为数组：\nfunction foo() {\n  const args = Array.prototype.slice.call(arguments);\n  console.log(args);\n}\n\nfoo(1, 2, 3); // [1, 2, 3]\n\n//这里使用了 call() 方法，将 Array.prototype.slice 方法绑定到 arguments 对象上，并传入一个空的 this 对象，以调用 slice() 方法。这样得到的 args 数组就是 arguments 对象的副本，可以对它进行数组操作。\n"
        }
      ],
      "id": "w_83eRNH",
      "createdAt": 1677643258698,
      "updatedAt": 1677643622257
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "判断是否是一个数组",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const isArray = function(arr) { // 判断是否是一个数组\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}"
        }
      ],
      "id": "8xz6yNcN",
      "createdAt": 1677643575437,
      "updatedAt": 1677643587521
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "它不会改变原数组，而是返回一个新数组；slice() 方法是 JavaScript 数组的一个方法，用于从数组中提取一个子数组，包含从起始索引到结束索引之间的元素（包括起始索引但不包括结束索引）\n。如果 start 参数是负数，表示从数组的末尾开始计算，例如 -2 表示从数组的倒数第二个元素开始提取",
      "name": "slice()方法",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const arr = [1, 2, 3, 4, 5];\nconst subArr = arr.slice(1, 4);\nconsole.log(subArr); // [2, 3, 4]\nconsole.log(arr); // [1, 2, 3, 4, 5]\n\n//slice() 方法还可以用于将类数组对象转换为真正的数组。例如，将一个 arguments 对象转换为数组：\nfunction foo() {\n  const args = Array.prototype.slice.call(arguments);\n  console.log(args);\n}\n\nfoo(1, 2, 3); // [1, 2, 3]\n\n//这里使用了 call() 方法，将 Array.prototype.slice 方法绑定到 arguments 对象上，并传入一个空的 this 对象，以调用 slice() 方法。这样得到的 args 数组就是 arguments 对象的副本，可以对它进行数组操作。"
        }
      ],
      "id": "xK_DFo5S",
      "createdAt": 1677643597022,
      "updatedAt": 1677643619865
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [
        "8EChA0GN",
        "VMVF-8hD"
      ],
      "description": "注意在[ ]里直接使用...spread扩展符的用法，document.querySelectorAll('.movements__row')的返回值就是类数组，所以在前面用 ‘...’ 很自然",
      "name": "将类数组转换为数组",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "[...document.querySelectorAll('.movements__row')].forEach(function (row, i) {\n    // 0, 2, 4, 6\n    if (i % 2 === 0) row.style.backgroundColor = 'orangered';\n    // 0, 3, 6, 9\n    if (i % 3 === 0) row.style.backgroundColor = 'blue';\n});"
        },
        {
          "label": "Fragment 2",
          "language": "javascript",
          "value": ""
        }
      ],
      "id": "WO4NKXh_",
      "createdAt": 1677665594014,
      "updatedAt": 1677911605112
    }
  ],
  "tags": [
    {
      "name": "加载",
      "id": "6-jXY9xe",
      "createdAt": 1677638829391,
      "updatedAt": 1677638829391
    },
    {
      "name": "它不会改变原数组，而是返回一个新数组",
      "id": "oX2m4dHL",
      "createdAt": 1677643286276,
      "updatedAt": 1677643286276
    },
    {
      "name": "类数组",
      "id": "8EChA0GN",
      "createdAt": 1677665638339,
      "updatedAt": 1677665638339
    },
    {
      "name": "奇偶数",
      "id": "VMVF-8hD",
      "createdAt": 1677665702294,
      "updatedAt": 1677665702294
    }
  ]
}