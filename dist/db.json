{
  "folders": [
    {
      "name": "javascript",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "javascript",
      "id": "y-C8x3sP",
      "createdAt": 1677574921501,
      "updatedAt": 1677574968878,
      "index": 0
    },
    {
      "name": "CSS",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "css",
      "id": "3BVGYMMN",
      "createdAt": 1677579960490,
      "updatedAt": 1678974417347,
      "index": 1
    },
    {
      "name": "vue",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "vue",
      "id": "-fio_qG6",
      "createdAt": 1678105368093,
      "updatedAt": 1678975111702,
      "index": 2
    },
    {
      "name": "element ui",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "plain_text",
      "id": "kYeA3Yuv",
      "createdAt": 1678621283163,
      "updatedAt": 1678621291846,
      "index": 3
    }
  ],
  "snippets": [
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "array.from() 是比fill加map更现代的方式",
      "name": "array.from()",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "// Array.from\nconst y = Array.from({ length: 7 }, () => 1);\nconsole.log(y);\n// this '_'to represent some parameyer no used\nconst z = Array.from({ length: 7 }, (_, i) => i + 1);\nconsole.log(z); //[1,2,3,4,5,6,7]\n\nlabelBalance.addEventListener('click', function () {\n  const movementsUI = Array.from(\n    document.querySelectorAll('.movements__value'),\n    //第二个参数相当于map()函数\n    el => Number(el.textContent.replace('€', ''))  //去除字符串里的€符号\n  );\n  console.log(movementsUI);\n  //下面如果不用Array.from 用扩展运算符也可以实现，但需要另外用一次map()，而Array.from结合其第二个参数可以一次完成\n  // const movementsUI2 = [...document.querySelectorAll('.movements__value')];\n  // movementsUI2.map(...)\n});\n\n//array.from() 是比fill加map更现代的方式.下面的方式用array.from()一样可以实现\n//创建空数组，填充fill，然后map\nfunction createData() {\n  // 如果不 fill 循环默认会跳过空值\n  return new Array(1000).fill(null).map((v, i) => ({ name: `name${i + 1}` }));\n}\n\nconst data = createData();\nconsole.log(data);\n\n//另一种实现方式，用for循环\nfunction createData() {\n  const data = [];\n  for (let i = 0; i < 1000; i++) {\n    data.push({\n      name: `name${i + 1}`,\n    });\n  }\n  return data;\n}\n\nconst data = createData();\nconsole.log(data);"
        }
      ],
      "id": "bZ1RBcHH",
      "createdAt": 1677574971683,
      "updatedAt": 1677581484402
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "sort forEach insertAdjacentHTML",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const displayMovements = function (acc, sort = false) {\n  containerMovements.innerHTML = \"\";\n\n  const movs = sort\n    ? acc.movements.slice().sort((a, b) => a - b)\n    : acc.movements;\n\n  movs.forEach(function (mov, i) {\n    const type = mov > 0 ? \"deposit\" : \"withdrawal\";\n\n    const date = new Date(acc.movementsDates[i]);\n    const displayDate = formatMovementDate(date, acc.locale);\n\n    const formattedMov = formatCur(mov, acc.locale, acc.currency);\n\n    const html = `\n      <div class=\"movements__row\">\n        <div class=\"movements__type movements__type--${type}\">${\n      i + 1\n    } ${type}</div>\n        <div class=\"movements__date\">${displayDate}</div>\n        <div class=\"movements__value\">${formattedMov}</div>\n      </div>\n    `;\n\n    containerMovements.insertAdjacentHTML(\"afterbegin\", html);\n  });\n};"
        }
      ],
      "id": "xdOPwTuH",
      "createdAt": 1677575344168,
      "updatedAt": 1677575362825
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Toggle",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "let sorted = false;\nbtnSort.addEventListener('click', function (e){\n  e.preventDefault(); //阻止默认的表单提交刷新页面\n  displayMovements(currentAccount.movements,!sorted);\n  sorted = !sorted;\n})"
        }
      ],
      "id": "4YRe80Xi",
      "createdAt": 1677575412067,
      "updatedAt": 1677575419032
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "reduce()",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const orders = [{ id: 1, amount: 10 }, { id: 2, amount: 12 }, { id: 3, amount: 5 }]\nconst totalAmount = orders.reduce((sum, order) => sum + order.amount, 0); // 27\n/*累加可以，那么 加减乘除 中其他三个的原理是一样的，这里不用多说，肯定是可以的，\n甚至加上 与 、非的计算也是可以的，比如*/\n[true, true, false, true].reduce((a, b) => a & b); // 有false，按照与逻辑，一定会是false"
        }
      ],
      "id": "bf6LnPoL",
      "createdAt": 1677575451164,
      "updatedAt": 1677575460255
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "forEach()和map()结合",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//核心：forEach()不会有返回值，但可以改变原数组对象，通过forEach()和map()给数组对象添加一个新属性\n// Data\nconst account1 = {\n  owner: 'Jonas Schmedtmann',\n  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],\n  interestRate: 1.2, // %\n  pin: 1111,\n};\n\nconst account2 = {\n  owner: 'Jessica Davis',\n  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],\n  interestRate: 1.5,\n  pin: 2222,\n};\n\nconst account3 = {\n  owner: 'Steven Thomas Williams',\n  movements: [200, -200, 340, -300, -20, 50, 400, -460],\n  interestRate: 0.7,\n  pin: 3333,\n};\n\nconst account4 = {\n  owner: 'Sarah Smith',\n  movements: [430, 1000, 700, 50, 90],\n  interestRate: 1,\n  pin: 4444,\n};\n\nconst accounts = [account1, account2, account3, account4];\n\n//function\nconst createUsernames = function (accs) {\n  accs.forEach(function (acc) {\n    //利用map返回新数组的特性给原数组添加一个新属性\n    acc.username = acc.owner\n      .toLowerCase()\n      .split(' ')\n      .map(name => name[0])\n      .join('');\n  });\n};\ncreateUsernames(accounts);\n\n\n//将会输出一个包含四个对象的数组，其中包含新创建的属性'username'\nconsole.log(accounts)"
        }
      ],
      "id": "Mm1kTDnU",
      "createdAt": 1677575496707,
      "updatedAt": 1677575512299
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "",
      "content": [
        {
          "label": "Fragment 1",
          "value": "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n",
          "language": "plain_text"
        }
      ],
      "id": "xmFO4S7x",
      "createdAt": 1677575778167,
      "updatedAt": 1677575990317
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "",
      "content": [
        {
          "label": "Fragment 1",
          "value": "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n",
          "language": "plain_text"
        }
      ],
      "id": "y8AxHdjJ",
      "createdAt": 1677575952165,
      "updatedAt": 1677575992937
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "",
      "content": [
        {
          "label": "Fragment 1",
          "value": "const orders = [{ id: 1, amount: 10 }, { id: 2, amount: 12 }, { id: 3, amount: 5 }]\nconst totalAmount = orders.reduce((sum, order) => sum + order.amount, 0); // 27\n/*累加可以，那么 加减乘除 中其他三个的原理是一样的，这里不用多说，肯定是可以的，\n甚至加上 与 、非的计算也是可以的，比如*/\n[true, true, false, true].reduce((a, b) => a & b); // 有false，按照与逻辑，一定会是false",
          "language": "plain_text"
        }
      ],
      "id": "ddCyDVGE",
      "createdAt": 1677576234823,
      "updatedAt": 1677576469891
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "",
      "content": [
        {
          "label": "Fragment 1",
          "value": "});\n",
          "language": "plain_text"
        }
      ],
      "id": "6hLU6hms",
      "createdAt": 1677576302105,
      "updatedAt": 1677576472273
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "",
      "content": [
        {
          "label": "Fragment 1",
          "value": "document.addEventListener(\"DOMContentLoaded\", async () => {\n  const activeTab = await getActiveTabURL();\n  queryParameters = activeTab.url;\n  // const urlParameters = new URLSearchParams(queryParameters);\n});",
          "language": "plain_text"
        }
      ],
      "id": "nP0dmW7J",
      "createdAt": 1677576327516,
      "updatedAt": 1677576467876
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "从特定数组对象中获取值的函数",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//从特定数组对象中获取值的函数\nfunction findProductData(data, productName, property) {\n  const product = data.find(obj => obj.product === productName);\n  return product ? product[property] : null;\n}\n//You can call this function like this:\nconst data = JSON.parse(jsonString).data;\nconst product1 = findProductData(data, \"DBOne\", \"product\");\nconst btnUrl1 = findProductData(data, \"DBOne\", \"btnUrl\");\nconst product2 = findProductData(data, \"DBTwo\", \"product\");\nconst btnUrl2 = findProductData(data, \"DBTwo\", \"btnUrl\");\n\n/*n this example, `data` is the array of objects you want to search, \n`productName` is the value of the `product` property you want to find, \nand `property` is the name of the property you want to retrieve. \n\nThe `findProductData` function returns the value of the `property`\n parameter for the object that has a `product` property equal to `\n productName`. If no such object is found, the function returns `null`.*/"
        }
      ],
      "id": "e8l1fG6K",
      "createdAt": 1677576778290,
      "updatedAt": 1677576797438
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "从对象提取属性的若干方式",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const [entry] = entries;\n/*这句话是ES6中解构赋值语法的一种。它的作用是把数组或对象中的值解构出来并赋值给左侧的变量。\n在这里，entries是一个数组，使用解构赋值的方式把它的第一个元素（下标为0）赋值给entry变量。\n等价于下面的写法：const entry = entries[0]; \nconst[entry,en2] = entries 这句与上一句类似，不同之处在于它使用了解构赋值的扩展语法。这里\n将数组entries中的前两个元素（下标为0和1）依次解构并赋值给entry和en2两个变量，可以理解为：\nconst entry = entries[0];\nconst en2 = entries[1];\n*/\n\n//方式一 \n//使用 map() 方法将提若干属性取到一个数组中，而不必返回整个对象\nconst data = JSON.parse(jsonString).data;\n\n//注意，如果提取的属性是惟一的就用find(),因为发现目标后会理解返回对象，不在执行遍历\nconst products = data.filter(obj => obj.product === \"DBOne\").map(obj => {\n  return {\n    product: obj.product,\n    btnUrl: obj.btnUrl\n  };\n});\n\n//方式二\n//优化方案：对象解构的方式比map更优雅，不通点：map返回的是数组，对象解构的是属性\nconst { product, btnUrl } = data.find(obj => obj.product === \"DBOne\");\n/*在这个例子中，find() 方法用于查找具有 'product' 值为 'DBOne' 的对象，\n并将其存储在一个变量中。然后，对象解构用于从该对象中提取 'product' 和\n'btnUrl' 字段，并将它们存储在 product 和 btnUrl 变量中。*/\n\n//方式三\n/*上一个方法适用于您只需要访问少量字段的情况，并且不需要修改对象。\n如果您需要修改对象，那么您可能需要返回整个对象。在这种情况下，\n您可以使用对象解构来清晰地指定要修改的字段。例如，以下代码仅修改 'product' 字段：*/\nconst obj = data.find(obj => obj.product === \"DBOne\");\nconst { product, ...rest } = obj;\n//将rest对象与修改后的product字段合并到一个新的对象modifiedObj中\nconst modifiedObj = {\n  ...rest,\n  product: \"New Product Name\"\n};\n\n//方式四 核心：obj[key]\n//将产品信息存储在一个对象中，其中键是产品名称，值是产品信息对象，如下所示：\nconst products = {\n  \"DBOne\": {\n    essentials: [\"essential1\", \"essential2\"],\n    subTitle: \"演示要点\"\n  },\n  \"DBOne Monitor\": {\n    essentials: [\"essential3\", \"essential4\"],\n    subTitle: \"演示要点\"\n  },\n  \"DBSync\": {\n    essentials: [\"essential5\", \"essential6\"],\n    subTitle: \"演示要点\"\n  },\n  //...\n};\n//然后，在代码中，您可以使用 products 对象来查找相应产品的信息，如下所示：\n//const productName = 'DBSync';\nconst productName = findProductName(queryParameters);\n//productName in products 返回布尔值\nif (productName in products) {\n  //由于products的属性是对象形式，这里productInfo会返回一个目标对象\n  const productInfo = products[productName];\n  //productInfo是对象，这里可以进行解构\n  const { essentials, subTitle } = productInfo;\n    console.log('productInfo:',productInfo)\n    console.log('essentials:',essentials)\n} else {\n  console.log(`Product not found for name '${productName}'`);\n}\n\nfunction findProductName(queryParameters) {\n  if (queryParameters.includes(\"11.0.2.10:8080\")) {\n    return \"DBOne\";\n  } else if (queryParameters.includes(\"11.0.2.14:9090\")) {\n    return \"DBOne Monitor\";\n  } else if (queryParameters.includes(\"11.0.2.17:8888\")) {\n    return \"DBSync\";\n  } else {\n    return null;\n  }\n}\nfunction findProductName(queryParameters) {\n  if (queryParameters.includes(\"11.0.2.10:8080\")) {\n    return \"DBOne\";\n  } else if (queryParameters.includes(\"11.0.2.14:9090\")) {\n    return \"DBOne Monitor\";\n  } else if (queryParameters.includes(\"11.0.2.17:8888\")) {\n    return \"DBSync\";\n  } else {\n    return null;\n  }\n}\n/*在这个版本的代码中，我们首先定义了一个名为 `products` 的对象，用于存储不同产品的信息\n。然后，我们定义了一个名为 `findProductName` 的函数，用于根据查询参数返回相应的产品名称。\n接下来，在代码中，我们首先调用 `findProductName` 函数，找到相应的产品名称。然后，我们使用\n `products` 对象来查找该产品的信息，并更新 UI 元素的内容。\n这个版本的代码更简洁、更易于维护，而且可以很容易地添加或删除产品信息，而无需修改多个 `if` 代码块。*/"
        }
      ],
      "id": "Pfb1HxdY",
      "createdAt": 1677576889200,
      "updatedAt": 1678337321371
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Mapping Product Names",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const productMap = {\n      \"11.0.2.10:8080\": \"DBOne\",\n      \"11.0.2.14:9090\": \"DBOne Monitor\",\n      \"11.0.2.17:8888\": \"DBSync\",\n      \"11.0.2.15:9090\": \"DBMigrate\",\n      \"11.0.2.28:9090\": \"DDMOne\",\n      \"11.0.2.50:8080\": \"StoreOne\",\n      \"11.0.0.34:8888\": \"AnalyzeOne\",\n      \"11.0.2.20:8002\": \"DataOne\",\n      \"11.0.24.121:8002\": \"DataOne\",\n      \"11.0.2.91:8888\": \"LogOne\",\n      \"11.0.1.149:9090\": \"UIOne\",\n      \"11.0.2.40:83\": \"GraphOne\",\n      \"11.0.2.41:9080\": \"KGOne\",\n      \"11.0.4.127:9080\": \"KGOne\",\n      //TODO: CanOne 业务系统\n      \"11.0.2.37:38800/\": \"CanOne\",\n      \"11.0.2.37:38900\": \"CanOne\",\n      \"11.0.0.160:8080\": \"InforOne\",\n      \"11.0.2.30:38100\": \"BinOne\",\n      \"11.0.2.30:38200\": \"BinOne\",\n      // TODO: RangeOne 管理员\n      \"11.0.1.54\": \"RangeOne\",\n      \"11.0.2.91:9090\": \"RS-Training\",\n    };\n    //注意Object.keys()的简单用法，另外find()返回的是对象，includes()返回的是布尔值\n    let includesKey = Object.keys(productMap).find((key) =>\n      queryParameters.includes(key)\n    );\n    if (includesKey) { //includesKey 是相关页面的url地址\n      const productName = productMap[includesKey];//这里就很简单了，是键值对的值，基础知识都很简单但很容易迷惑\n      updateUI(productName, formatEssentials);\n    }"
        }
      ],
      "id": "Hr3Ejo-4",
      "createdAt": 1677576967090,
      "updatedAt": 1677576977969
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "高阶函数",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "// 转换为一个字符串\nconst oneWord = function (str) {\n  //全局去除空格，并转换为小写\n  return str.replace(/ /g, '').toLowerCase();\n};\n//将字符串句子的第一个词全部转换为大写\nconst upperFirstWord = function (str) {\n  //先转换为数组，并利用扩展运算符spread将首个单词抽离成变量方便下面操作\n  const [first, ...others] = str.split(' ');\n  //转换为字符串\n  return [first.toUpperCase(), ...others].join(' ');\n};\n\n// Higher-order function 高阶函数:Functions Accepting Callback Functions\nconst transformer = function (str, fn) {\n  console.log(`Original string: ${str}`);\n  console.log(`Transformed string: ${fn(str)}`);\n  //函数也是对象所以也有name属性\n  console.log(`Transformed by: ${fn.name}`);\n};\n\ntransformer('JavaScript is the best!', upperFirstWord);\ntransformer('JavaScript is the best!', oneWord);"
        }
      ],
      "id": "-ca1xOVn",
      "createdAt": 1677578180579,
      "updatedAt": 1677579693550
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "函数参数值",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//原始数据类型在调用栈中会生成副本，此时副本的改动与原数据无关，引用类型在堆中直接被改变\n// How Passing Arguments Works: Values vs. Reference\nconst flight = 'LH234';\nconst jonas = {\n  name: 'Jonas Schmedtmann',\n  passport: 24739479284,\n};\nconst checkIn = function (flightNum, passenger) {\n  flightNum = 'LH999';//函数内这个对原始数据类型参数值的变更是无效的，因为调用栈中已经有副本\n  passenger.name = 'Mr. ' + passenger.name; //而引用类型会改变原始对象或数组的值\n  if (passenger.passport === 24739479284) {\n    alert('Checked in');\n  } else {\n    alert('Wrong passport!');\n  }\n};\ncheckIn(flight, jonas); // Checked in\nconsole.log(flight); // LH234\nconsole.log(jonas); // {name: 'Mr. Jonas Schmedtmann', passport: 24739479284}\n\n// Is the same as doing...\n// const flightNum = flight;\n// const passenger = jonas;\n\n//注意下面传进去的是对象，函数内的更改也会变更原始对象的值\nconst newPassport = function (person) {\n  person.passport = Math.trunc(Math.random() * 100000000000);\n};\nnewPassport(jonas);\n//jonas的passport被更改了，checkIn的条件不成立了\ncheckIn(flight, jonas);//Wrong passport!"
        }
      ],
      "id": "M1LHwx0r",
      "createdAt": 1677579927015,
      "updatedAt": 1677579935350
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "3BVGYMMN",
      "tagsIds": [],
      "description": null,
      "name": "css 下划线",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "background-image: linear-gradient(90deg,#fae54d 0,#fae54d);\nbackground-position: left bottom 20%;\nbackground-repeat: repeat-x;\nbackground-size: 1px 4px;"
        }
      ],
      "id": "gzvnkrMo",
      "createdAt": 1677579971923,
      "updatedAt": 1678189146112
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "append",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "// 格式化字符，将字符转换为驼峰形式，注意其中的dom操作，append\\createElement \n // 测试用，粘贴到textarea\n    //     underscore_case\n    //  first_name\n    // Some_Variable\n    //   calculate_AGE\n    // delayed_departure\n    document.body.append(document.createElement(\"textarea\"));\n    document.body.append(document.createElement(\"button\"));\n    let btn = document.querySelector(\"button\");\n    btn.innerText = \"Btton\";\n\n    btn.addEventListener(\"click\", function () {\n      // 获取textarea的内容\n      const text = document.querySelector(\"textarea\").value;\n      const rows = text.split(\"\\n\");\n      for (const [i, row] of rows.entries()) {\n        // split()后就是是数组，所以下面可以从数组里解构出两个变量\n        const [first, second] = row.toLowerCase().trim().split(\"_\");\n        // replace()参数第二个可以替换掉第一个\n        const output = `${first}${second.replace(\n          second[0],\n          second[0].toUpperCase()\n        )}`;\n        // 很简单根据循环次数输出-)\n        console.log(`${output.padEnd(20)}${\"-)\".repeat(i + 1)}`);\n      }\n    });"
        }
      ],
      "id": "MrNllTU0",
      "createdAt": 1677580076299,
      "updatedAt": 1677580084420
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "String常用方法",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//去除字符串空格\nconst trim = function(str, type) { // 去除空格， type:  1-所有空格  2-前后空格  3-前空格 4-后空格\n  type = type || 1\n  switch (type) {\n    case 1:\n      return str.replace(/\\s+/g, '')\n    case 2:\n      return str.replace(/(^\\s*)|(\\s*$)/g, '')\n    case 3:\n      return str.replace(/(^\\s*)/g, '')\n    case 4:\n      return str.replace(/(\\s*$)/g, '')\n    default:\n      return str\n  }\n}\n\n//字符串大小写转换\n\nconst changeCase = function(str, type) { // 字符串大小写转换 type:  1:首字母大写  2：首页母小写  3：大小写转换  4：全部大写  5：全部小写\n  type = type || 4\n  switch (type) {\n    case 1:\n      return str.replace(/\\b\\w+\\b/g, function(word) {\n        return word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase()\n      })\n    case 2:\n      return str.replace(/\\b\\w+\\b/g, function(word) {\n        return word.substring(0, 1).toLowerCase() + word.substring(1).toUpperCase()\n      })\n    case 3:\n      return str.split('').map(function(word) {\n        if (/[a-z]/.test(word)) {\n          return word.toUpperCase()\n        } else {\n          return word.toLowerCase()\n        }\n      }).join('')\n    case 4:\n      return str.toUpperCase()\n    case 5:\n      return str.toLowerCase()\n    default:\n      return str\n  }\n}\n\n//MSN搜索技巧  搜索：msn string repalce ,后面一个关键字是你要搜索的具体方法\n// Split and join 非常重要和常用\n//从'+'处split成数组\nconsole.log('a+very+nice+string'.split('+'));//['a', 'very', 'nice', 'string']\nconsole.log('Jonas Schmedtmann'.split(' '));\nconst [firstName, lastName] = 'Jonas Schmedtmann'.split('');//['Jonas', 'Schmedtmann']\nconst newName = ['Mr.',firstName, lastName.toUpperCase()].join();\nconsole.log(newName);\n\n//综合应用 slice() replace()  join()  for of    \nconst capitalizeName = function(name){\n    const names = name.split(' ');\n    const namesUpper = [];\n    for (const n of names){//of 后面跟的是数组\n      //namesUpper.push(n[0].toUpperCase()+ n.slice(1)) 下面和这里一样的结果\n      namesUpper.push(n.replace(n[0],n[0].toUpperCase()\n))\n    }\n      console.log(namesUpper.join(' '));\n}\n    \ncapitalizeName('jessica ann smith davis');\ncapitalizeName('jonas schmedtmann');\nVM1047:8 Jessica Ann Smith Davis\n\n// replacing\nconst priceGB ='288,97f'\nconst priceUS = priceGB.replace('f','$').replace(',','.')\nconsole.log(priceUS);\n\nconst announcement ='All passengers come to boarding door 23. Boarding door 23!'\nconsole.log(announcement.replace('door' ,'gate'));//只能匹配第一个 \nconsole.log(announcement.replaceAll('door','gate'));//全部匹配\nconsole.log(announcement.replace(/door/g,'gate'));//全部匹配\n\n//padStart()  padEnd()  slice()参数负数的应用\nconst message = 'Go to gate 23!!';\n//注意链式用法\nconsole.log(message.padStart(20,'+').padEnd(30,'+'))//+++++Go to gate 23!!++++++++++\n\n//银行卡只显示后几位数\nconst maskCreditCard = function (number) {\n   const str = number + ''; //将 number 这个变量转换为字符串类型\n   const last = str.slice(-4);\n   return last.padStart(str.length, '*');\n}\nconsole.log(maskCreditCard(64637836));//****7836\nconsole.log(maskCreditCard(43378463864647384));//*************7384\nconsole.log(maskCreditCard('334859493847755'))//***********7755 \n\n//includes() 返回布尔值\nconsole.log(announcement.includes('door')); //true\n\n//startsWith()  endswith() 都返回布尔值\nconsole.log(announcement.startsWith('All')); //true\n\n// repeat()  注意${'D'.repeat(n)}的用法,会repeat前面\nconst message2 = 'Bad waether... All DepartuesDelayed...'\nconsole.log(message2.repeat(5));\n\nconst planesInLine = function (n) {\n   console.log(`There are ${n} planes in line ${'D'.repeat(n)}`);\n}\nplanesInLine(5);\nplanesInLine(3);\nplanesInLine(12);\n\n// Practice exercise\nconst checkBaggage = function (items){\n  const baggage = items.toLowerCase(); //先全部转为小写\n    \n  if (baggage.includes('knife') || baggage.includes('gun')){\n     console.log('You are NOT allowed on board');\n  }else {\n     console.log('Welcome aboard!');\n  }\n}\ncheckBaggage('I have a laptop, some Food and a pocket Knife');\ncheckBaggage('Socks and camera');\ncheckBaggage('Got some snacks and a gun for protection');\n\n// String Methods Practice，下面格式化了一段机场信息，重点是for of 的用法，\n\nconst flights =\n  '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';\n\n// 🔴 Delayed Departure from FAO to TXL (11h25)\n//              Arrival from BRU to FAO (11h45)\n//   🔴 Delayed Arrival from HEL to FAO (12h05)\n//            Departure from FAO to LIS (12h30)\n\nconst getCode = str => str.slice(0, 3).toUpperCase();\n\n//of的时候可以直接split()将字符串转为数组\nfor (const flight of flights.split('+')) {\n  //要深刻理解下面一行代码,非常重要！split()将字符串转为了数组，而左边对数组进行了解构，结构的变量名是自定义的\n  //左边解构之前的前提要了解结构的目标解构，这里的字符串是四个部分所以自定义了4个变量名\n  const [type, from, to, time] = flight.split(';');\n  //注意模板字符串里可以写表达式\n  const output = `${type.startsWith('_Delayed') ? '🔴' : ''}${type.replaceAll('_',' ')} \n  ${getCode(from)} ${getCode(to)} (${time.replace(':', 'h')})`.padStart(36);\n  console.log(output);\n}"
        }
      ],
      "id": "_ICz9XMC",
      "createdAt": 1677580106476,
      "updatedAt": 1678267695999
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Setters and Getters",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const account = {\n   owner: 'Jonas',\n   movements: [200,530,120,300],\n   get latest() {\n       //pop()会有返回值\n      return this.movements.slice(-1).pop();\n   },\n   \n   set latest(mov) {\n      this.movements.push(mov);\n   },\n}\n//直接像属性一样调用\nconsole.log(account.latest);//300\n//setters也一样像属性一样调用\naccount.latest = 50;\nconsole.log(account.movements);// [200, 530, 120, 300, 50]"
        }
      ],
      "id": "GMTtvAY_",
      "createdAt": 1677580193622,
      "updatedAt": 1677580201110
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Set 数组去重",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const arr1 = [1, 2, 3];\nconst arr2 = [3, 4, 5];\n\nconsole.log(new Set([...arr1, ...arr2]));"
        }
      ],
      "id": "EndzCZeg",
      "createdAt": 1677580693182,
      "updatedAt": 1677580699798
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "localStorage",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "// <textarea id=\"note\" cols=\"30\" rows=\"10\"></textarea><br>\n//  <input type=\"button\" id=\"save\" value=\"Save\">\nconst elmNote = document.getElementById(\"note\");\nconst elmSave = document.getElementById(\"save\");\n\nlet note = localStorage[\"note\"];\nif (note == null) {\n  note = \"\";\n}\nelmNote.value = note;\n\nelmSave.onclick = () => {\n  localStorage[\"note\"] = elmNote.value;\n};\n"
        }
      ],
      "id": "fihKW6fb",
      "createdAt": 1677581638818,
      "updatedAt": 1677581646124
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "用后台数据动态修改页面内容",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "document.querySelector(\".title-span\").innerHTML = \nstore.data.map((item, index) =>\n  `<li> ${index + 1} ${item.username} :---${item.password}</li>`)\n  .join(\"\");"
        }
      ],
      "id": "5zH7qNvD",
      "createdAt": 1677581715555,
      "updatedAt": 1677581767601
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "fetch",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "let store = [];\nasync function fetchData() {\n  try {\n    const options = {\n      method: \"GET\",\n      // timeout: 5000,\n      headers: {\n        // 'X-Custom-Header': 'Custom Value'\n      },\n    };\n    const res = await fetch(\n      // \"http://11.0.23.161/api/manage/entrance\",\n      \"https://www.fastmock.site/mock/a2de472a0f195923aab5cc1c7682ce28/api/chrome_ex\",\n      options\n    );\n    if (res.status == 200) {\n      store = await res.json();\n      console.log(\"store\", store);\n      // 动态修改页面内容\n      // document.querySelector(\".title-span\").innerHTML = store.data\n      //   .map(\n      //     (item, index) =>\n      //       `<li> ${index + 1} ${item.username} :---${item.password}</li>`\n      //   )\n      //   .join(\"\");\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\nfetchData()\n\n\n//fetch请求的封装\nconst fetch = function(url, setting) { // fetch请求的封装\n  let opts = { // 设置参数的初始值\n    method: (setting.method || 'GET').toUpperCase(), // 请求方式\n    headers: setting.headers || {}, // 请求头设置\n    credentials: setting.credentials || true, // 设置cookie是否一起发送\n    body: setting.body || {},\n    mode: setting.mode || 'no-cors', // 可以设置 cors, no-cors, same-origin\n    redirect: setting.redirect || 'follow', // follow, error, manual\n    cache: setting.cache || 'default' // 设置 cache 模式 (default, reload, no-cache)\n  }\n  let dataType = setting.dataType || 'json' // 解析方式\n  let data = setting.data || '' // 参数\n  let paramsFormat = function(obj) { // 参数格式\n    var str = ''\n    for (var i in obj) {\n      str += `${i}=${obj[i]}&`\n    }\n    return str.split('').slice(0, -1).join('')\n  }\n\n  if (opts.method === 'GET') {\n    url = url + (data ? `?${paramsFormat(data)}` : '')\n  } else {\n    setting.body = data || {}\n  }\n  return new Promise((resolve, reject) => {\n    fetch(url, opts).then(async res => {\n      let data = dataType === 'text' ? await res.text() : dataType === 'blob' ? await res.blob() : await res.json()\n      resolve(data)\n    }).catch(e => {\n      reject(e)\n    })\n  })\n}"
        }
      ],
      "id": "zQnI5Oah",
      "createdAt": 1677581820829,
      "updatedAt": 1677640169599
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "flatMap()是flat()和map()方法的结合，但只能flat一层的数组解构，要flat嵌套更深的数组还是需要用flat('里面放数字')",
      "name": "flatMap()",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//data\nconst account1 = {\n  owner: 'Jonas Schmedtmann',\n  movements: [200, 450, -400, 3000, -650, -130, 70, 1300],\n  interestRate: 1.2, // %\n  pin: 1111,\n};\n\nconst account2 = {\n  owner: 'Jessica Davis',\n  movements: [5000, 3400, -150, -790, -3210, -1000, 8500, -30],\n  interestRate: 1.5,\n  pin: 2222,\n};\n\nconst account3 = {\n  owner: 'Steven Thomas Williams',\n  movements: [200, -200, 340, -300, -20, 50, 400, -460],\n  interestRate: 0.7,\n  pin: 3333,\n};\n\nconst account4 = {\n  owner: 'Sarah Smith',\n  movements: [430, 1000, 700, 50, 90],\n  interestRate: 1,\n  pin: 4444,\n};\n//注意这个用法，将一组数据再合并到一个数组\nconst accounts = [account1, account2, account3, account4];\n\n// 1) 仅使用flatMap()\naccounts.flatMap(acc => acc.movements)\n//输出：[200, 450, -400, 3000, -650, -130, 70, 1300, 5000, 3400, -150, -790, -3210, -1000, 8500, -30, 200, -200, 340, -300, -20, 50, 400, -460, 430, 1000, 700, 50, 90]\n\n// 2) 下面结合reduce(),内含多种重要概念，sums[cur > 0 ? 'deposits' : 'withdrawals']用法、解构赋值\nconst { deposits, withdrawals } = accounts\n  .flatMap(acc => acc.movements)\n  .reduce(\n    (sums, cur) => {\n      // cur > 0 ? (sums.deposits += cur) : (sums.withdrawals += cur);\n      sums[cur > 0 ? 'deposits' : 'withdrawals'] += cur;\n      return sums;\n    },\n    { deposits: 0, withdrawals: 0 } //reduce的这个参数可以是一个对象\n  );\n\nconsole.log(deposits, withdrawals);\n"
        }
      ],
      "id": "eLuyhVRm",
      "createdAt": 1677637059208,
      "updatedAt": 1677642402927
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "监听页面滚动事件，分析clientHeight、scrollTop、scrollHeight三者的属性关系。",
      "name": "滚动加载",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "window.addEventListener('scroll', function() {\n  const clientHeight = document.documentElement.clientHeight;\n  const scrollTop = document.documentElement.scrollTop;\n  const scrollHeight = document.documentElement.scrollHeight;\n  if (clientHeight + scrollTop >= scrollHeight) {\n    // 检测到滚动至页面底部，进行后续操作\n    // ...\n  }\n}, false);"
        }
      ],
      "id": "i5D2-kdu",
      "createdAt": 1677638493940,
      "updatedAt": 1677638530850
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [
        "6-jXY9xe"
      ],
      "description": "渲染大数据时，合理使用createDocumentFragment和requestAnimationFrame，将操作切分为一小段一小段执行。",
      "name": "渲染大数据",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "setTimeout(() => {\n  // 插入十万条数据\n  const total = 100000;\n  // 一次插入的数据\n  const once = 20;\n  // 插入数据需要的次数\n  const loopCount = Math.ceil(total / once);\n  let countOfRender = 0;\n  const ul = document.querySelector('ul');\n  // 添加数据的方法\n  function add() {\n    const fragment = document.createDocumentFragment();\n    for(let i = 0; i < once; i++) {\n      const li = document.createElement('li');\n      li.innerText = Math.floor(Math.random() * total);\n      fragment.appendChild(li);\n    }\n    ul.appendChild(fragment);\n    countOfRender += 1;\n    loop();\n  }\n  function loop() {\n    if(countOfRender < loopCount) {\n      window.requestAnimationFrame(add);\n    }\n  }\n  loop();\n}, 0)"
        }
      ],
      "id": "oJTm2crt",
      "createdAt": 1677638742750,
      "updatedAt": 1677639354561
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "输入一个值，返回其数据类型",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "function type(para) {\n    return Object.prototype.toString.call(para)\n}"
        }
      ],
      "id": "AZuMV9_7",
      "createdAt": 1677639354655,
      "updatedAt": 1677639361599
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "数组去重",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "function unique1(arr) {\n    return [...new Set(arr)]\n}"
        }
      ],
      "id": "ASQlRoXd",
      "createdAt": 1677639391624,
      "updatedAt": 1677639397482
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "获得滚动条的滚动距离",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "function getScrollOffset() {\n    if (window.pageXOffset) {\n        return {\n            x: window.pageXOffset,\n            y: window.pageYOffset\n        }\n    } else {\n        return {\n            x: document.body.scrollLeft + document.documentElement.scrollLeft,\n            y: document.body.scrollTop + document.documentElement.scrollTop\n        }\n    }\n}"
        }
      ],
      "id": "xhgrp8OR",
      "createdAt": 1677639634299,
      "updatedAt": 1677639641271
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "获取url上的参数",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "function getUrlParam(sUrl, sKey) {\n    var result = {};\n    sUrl.replace(/(\\w+)=(\\w+)(?=[&|#])/g, function (ele, key, val) {\n        if (!result[key]) {\n            result[key] = val;\n        } else {\n            var temp = result[key];\n            result[key] = [].concat(temp, val);\n        }\n    })\n    if (!sKey) {\n        return result;\n    } else {\n        return result[sKey] || '';\n    }\n}\n\n//获取url参数（3）\nconst getUrlParam = function(name) { // 获取url参数\n  let reg = new RegExp('(^|&?)' + name + '=([^&]*)(&|$)', 'i')\n  let r = window.location.href.substr(1).match(reg)\n  if (r != null) {\n    return decodeURI(r[2])\n  }\n  return undefined\n}"
        }
      ],
      "id": "xWVC1bM7",
      "createdAt": 1677639830653,
      "updatedAt": 1677639913873
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "验证邮箱的正则表达式",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "function isAvailableEmail(sEmail) {\n    var reg = /^([\\w+.])+@\\w+([.]\\w+)+$/\n    return reg.test(sEmail)\n}"
        }
      ],
      "id": "7paq4zbw",
      "createdAt": 1677639860986,
      "updatedAt": 1677639866485
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "本地存储",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const store = { // 本地存储\n  set: function(name, value, day) { // 设置\n    let d = new Date()\n    let time = 0\n    day = (typeof(day) === 'undefined' || !day) ? 1 : day // 时间,默认存储1天\n    time = d.setHours(d.getHours() + (24 * day)) // 毫秒\n    localStorage.setItem(name, JSON.stringify({\n      data: value,\n      time: time\n    }))\n  },\n  get: function(name) { // 获取\n    let data = localStorage.getItem(name)\n    if (!data) {\n      return null\n    }\n    let obj = JSON.parse(data)\n    if (new Date().getTime() > obj.time) { // 过期\n      localStorage.removeItem(name)\n      return null\n    } else {\n      return obj.data\n    }\n  },\n  clear: function(name) { // 清空\n    if (name) { // 删除键为name的缓存\n      localStorage.removeItem(name)\n    } else { // 清空全部\n      localStorage.clear()\n    }\n  }\n}"
        }
      ],
      "id": "etnZKUnz",
      "createdAt": 1677639959428,
      "updatedAt": 1677639964799
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "cookie操作【set，get，del】",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const cookie = { // cookie操作【set，get，del】\n  set: function(name, value, day) {\n    let oDate = new Date()\n    oDate.setDate(oDate.getDate() + (day || 30))\n    document.cookie = name + '=' + value + ';expires=' + oDate + \"; path=/;\"\n  },\n  get: function(name) {\n    let str = document.cookie\n    let arr = str.split('; ')\n    for (let i = 0; i < arr.length; i++) {\n      let newArr = arr[i].split('=')\n      if (newArr[0] === name) {\n        return newArr[1]\n      }\n    }\n  },\n  del: function(name) {\n    this.set(name, '', -1)\n  }\n}"
        }
      ],
      "id": "1X6F3giD",
      "createdAt": 1677639985188,
      "updatedAt": 1677639990608
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Js获取元素样式【支持内联】",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const getRealStyle = function(obj, styleName) { // Js获取元素样式【支持内联】\n  var realStyle = null\n  if (obj.currentStyle) {\n    realStyle = obj.currentStyle[styleName]\n  } else if (window.getComputedStyle) {\n    realStyle = window.getComputedStyle(obj, null)[styleName]\n  }\n  return realStyle\n}"
        }
      ],
      "id": "KO08jltQ",
      "createdAt": 1677640048458,
      "updatedAt": 1677640054853
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "判断是否是一个数组",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "const isArray = function(arr) { // 判断是否是一个数组\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}"
        }
      ],
      "id": "jYr35fvG",
      "createdAt": 1677640256411,
      "updatedAt": 1677643591268
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "常用正则验证",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const checkStr = function(str, type) { // 常用正则验证，注意type大小写\n  switch (type) {\n    case 'phone': // 手机号码\n      return /^1[3|4|5|6|7|8|9][0-9]{9}$/.test(str)\n    case 'tel': // 座机\n      return /^(0\\d{2,3}-\\d{7,8})(-\\d{1,4})?$/.test(str)\n    case 'card': // 身份证\n      return /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/.test(str)\n    case 'pwd': // 密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线\n      return /^[a-zA-Z]\\w{5,17}$/.test(str)\n    case 'postal': // 邮政编码\n      return /[1-9]\\d{5}(?!\\d)/.test(str)\n    case 'QQ': // QQ号\n      return /^[1-9][0-9]{4,9}$/.test(str)\n    case 'email': // 邮箱\n      return /^[\\w-]+(.[\\w-]+)*@[\\w-]+(.[\\w-]+)+$/.test(str)\n    case 'money': // 金额(小数点2位)\n      return /^\\d*(?:.\\d{0,2})?$/.test(str)\n    case 'URL': // 网址\n      return /(http|ftp|https)://[\\w-_]+(.[\\w-_]+)+([\\w-.,@?^=%&:/~+#]*[\\w-@?^=%&/~+#])?/.test(str)\n    case 'IP': // IP\n      return /((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/.test(str)\n    case 'date': // 日期时间\n      return /^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2})(?::\\d{2}|:(\\d{2}):(\\d{2}))$/.test(str) ||\n        /^(\\d{4})-(\\d{2})-(\\d{2})$/.test(str)\n    case 'number': // 数字\n      return /^[0-9]$/.test(str)\n    case 'english': // 英文\n      return /^[a-zA-Z]+$/.test(str)\n    case 'chinese': // 中文\n      return /^[\\u4E00-\\u9FA5]+$/.test(str)\n    case 'lower': // 小写\n      return /^[a-z]+$/.test(str)\n    case 'upper': // 大写\n      return /^[A-Z]+$/.test(str)\n    case 'HTML': // HTML标记\n      return /<(\"[^\"]*\"|'[^']*'|[^'\">])*>/.test(str)\n    default:\n      return true\n  }\n}"
        }
      ],
      "id": "mvp1TuQ7",
      "createdAt": 1677640321006,
      "updatedAt": 1677640327409
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "原生dom操作",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const dom = {\n  $: function(selector) {\n    let type = selector.substring(0, 1)\n    if (type === '#') {\n      if (document.querySelecotor) return document.querySelector(selector)\n      return document.getElementById(selector.substring(1))\n    } else if (type === '.') {\n      if (document.querySelecotorAll) return document.querySelectorAll(selector)\n      return document.getElementsByClassName(selector.substring(1))\n    } else {\n      return document['querySelectorAll' ? 'querySelectorAll' : 'getElementsByTagName'](selector)\n    }\n  },\n  hasClass: function(ele, name) { /* 检测类名 */\n    return ele.className.match(new RegExp('(\\s|^)' + name + '(\\s|$)'))\n  },\n  addClass: function(ele, name) { /* 添加类名 */\n    if (!this.hasClass(ele, name)) ele.className += ' ' + name\n  },\n  removeClass: function(ele, name) { /* 删除类名 */\n    if (this.hasClass(ele, name)) {\n      let reg = new RegExp('(\\s|^)' + name + '(\\s|$)')\n      ele.className = ele.className.replace(reg, '')\n    }\n  },\n  replaceClass: function(ele, newName, oldName) { /* 替换类名 */\n    this.removeClass(ele, oldName)\n    this.addClass(ele, newName)\n  },\n  siblings: function(ele) { /* 获取兄弟节点 */\n    console.log(ele.parentNode)\n    let chid = ele.parentNode.children,\n      eleMatch = []\n    for (let i = 0, len = chid.length; i < len; i++) {\n      if (chid[i] !== ele) {\n        eleMatch.push(chid[i])\n      }\n    }\n    return eleMatch\n  },\n  getByStyle: function(obj, name) { /* 获取行间样式属性 */\n    if (obj.currentStyle) {\n      return obj.currentStyle[name]\n    } else {\n      return getComputedStyle(obj, false)[name]\n    }\n  },\n  domToStirng: function(htmlDOM) { /* DOM转字符串 */\n    var div = document.createElement('div')\n    div.appendChild(htmlDOM)\n    return div.innerHTML\n  },\n  stringToDom: function(htmlString) { /* 字符串转DOM */\n    var div = document.createElement('div')\n    div.innerHTML = htmlString\n    return div.children[0]\n  }\n}"
        }
      ],
      "id": "fNlZ00al",
      "createdAt": 1677640717075,
      "updatedAt": 1677640722417
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "JSON.stringify()     语法：JSON.stringify(value[, replacer [, space]]) ；第二个参数 replacer：过滤属性或者处理值；\n如果该参数是一个数组：则只有包含在这个数组中的属性名才会被序列化到最终的JSON字符串中\n如果该参数是一个函数︰则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理\n如果该参数为 null 或者未提供:，则对象所有的属性都会被序列化\n第三个参数space：美化输出格式",
      "name": "深入 JSON 更多参数和细节",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const obj = {\n  name: \"云牧\",\n  age: 18,\n};\n\n// 数组和函数进行过滤属性\nconsole.log(JSON.stringify(obj, [\"name\"])); // {\"name\":\"云牧\"}\nconsole.log(\n  JSON.stringify(obj, (key, value) => {\n    if (typeof value === \"string\") {\n      return undefined;\n    }\n    return value;\n  })\n); // {\"age\":18}\n// space 美化格式\nconsole.log(JSON.stringify(obj, null, \"\\t\"));"
        }
      ],
      "id": "f4UIxRp8",
      "createdAt": 1677641381502,
      "updatedAt": 1677641758833
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "它不会改变原数组，而是返回一个新数组；slice() 方法是 JavaScript 数组的一个方法，用于从数组中提取一个子数组，包含从起始索引到结束索引之间的元素（包括起始索引但不包括结束索引）\n。如果 start 参数是负数，表示从数组的末尾开始计算，例如 -2 表示从数组的倒数第二个元素开始提取",
      "name": "slice()方法",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "const arr = [1, 2, 3, 4, 5];\nconst subArr = arr.slice(1, 4);\nconsole.log(subArr); // [2, 3, 4]\nconsole.log(arr); // [1, 2, 3, 4, 5]\n\n//slice() 方法还可以用于将类数组对象转换为真正的数组。例如，将一个 arguments 对象转换为数组：\nfunction foo() {\n  const args = Array.prototype.slice.call(arguments);\n  console.log(args);\n}\n\nfoo(1, 2, 3); // [1, 2, 3]\n\n//这里使用了 call() 方法，将 Array.prototype.slice 方法绑定到 arguments 对象上，并传入一个空的 this 对象，以调用 slice() 方法。这样得到的 args 数组就是 arguments 对象的副本，可以对它进行数组操作。\n"
        }
      ],
      "id": "w_83eRNH",
      "createdAt": 1677643258698,
      "updatedAt": 1677643622257
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "判断是否是一个数组",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const isArray = function(arr) { // 判断是否是一个数组\n  return Object.prototype.toString.call(arr) === '[object Array]'\n}"
        }
      ],
      "id": "8xz6yNcN",
      "createdAt": 1677643575437,
      "updatedAt": 1677643587521
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "它不会改变原数组，而是返回一个新数组；slice() 方法是 JavaScript 数组的一个方法，用于从数组中提取一个子数组，包含从起始索引到结束索引之间的元素（包括起始索引但不包括结束索引）\n。如果 start 参数是负数，表示从数组的末尾开始计算，例如 -2 表示从数组的倒数第二个元素开始提取",
      "name": "slice()方法",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const arr = [1, 2, 3, 4, 5];\nconst subArr = arr.slice(1, 4);\nconsole.log(subArr); // [2, 3, 4]\nconsole.log(arr); // [1, 2, 3, 4, 5]\n\n//slice() 方法还可以用于将类数组对象转换为真正的数组。例如，将一个 arguments 对象转换为数组：\nfunction foo() {\n  const args = Array.prototype.slice.call(arguments);\n  console.log(args);\n}\n\nfoo(1, 2, 3); // [1, 2, 3]\n\n//这里使用了 call() 方法，将 Array.prototype.slice 方法绑定到 arguments 对象上，并传入一个空的 this 对象，以调用 slice() 方法。这样得到的 args 数组就是 arguments 对象的副本，可以对它进行数组操作。"
        }
      ],
      "id": "xK_DFo5S",
      "createdAt": 1677643597022,
      "updatedAt": 1677643619865
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [
        "8EChA0GN",
        "VMVF-8hD"
      ],
      "description": "注意在[ ]里直接使用...spread扩展符的用法，document.querySelectorAll('.movements__row')的返回值就是类数组，所以在前面用 ‘...’ 很自然",
      "name": "将类数组转换为数组",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "[...document.querySelectorAll('.movements__row')].forEach(function (row, i) {\n    // 0, 2, 4, 6\n    if (i % 2 === 0) row.style.backgroundColor = 'orangered';\n    // 0, 3, 6, 9\n    if (i % 3 === 0) row.style.backgroundColor = 'blue';\n});"
        },
        {
          "label": "Fragment 2",
          "language": "javascript",
          "value": ""
        }
      ],
      "id": "WO4NKXh_",
      "createdAt": 1677665594014,
      "updatedAt": 1677911605112
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Element Contains",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "const elementContains = (parent, child) =>\n  parent !== child && parent.contains(child)\n  \n  //Example\n  const head = document.querySelector('head')\nconst body = document.querySelector('body')\n\nelementContains(head, body) // true"
        }
      ],
      "id": "RXx-J-WS",
      "createdAt": 1677925363218,
      "updatedAt": 1677941776049
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "-fio_qG6",
      "tagsIds": [],
      "description": null,
      "name": "动态更换背景图的组件",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "<template>\n    <div>\n        <div class=\"bg-image\" :style=\"{ backgroundImage: 'url(' + imageUrl + ')' }\">\n            <div class=\"l_1\">\n                <slot>默认值</slot>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'DynamicBgImage',\n    props: {\n        imageUrl: {\n            type: String,\n            required: true,\n            // 动态图片需要使用require()引入，这个是默认的一张图，其他页面可以自定义其他图\n            default: require('../../../assets/images/winbg.png')\n        }\n    }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.l_1 {\n    position: relative;\n    width: 100%;\n    height: auto;\n    padding: 1vw 1.3vw;\n    padding-bottom: -6vw;\n    margin-bottom: 1vw;\n    background: url('../../../assets/images/titleBG_5.svg') center top no-repeat;\n    background-size: contain;\n    border: 1px solid;\n    border-image: linear-gradient(180deg, rgba(0, 255, 255, 0.5) 0%, #00bbf2 20%, rgba(0, 255, 255, 0.1) 100%)2 2 2 2;\n}\n\n.bg-image {\n    width: 100%;\n    height: 100%;\n    background-size: cover;\n}\n</style>"
        }
      ],
      "id": "jBtfVxSi",
      "createdAt": 1678105375885,
      "updatedAt": 1678105641291
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "-fio_qG6",
      "tagsIds": [],
      "description": null,
      "name": "动态更换背景图的组件",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "<template>\n    <div>\n        <div class=\"bg-image\" :style=\"{ background: `url(${imageUrl}) no-repeat bottom / contain` }\">\n            <div class=\"l_1\">\n                <slot>默认值</slot>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'DynamicBgImage',\n    props: {\n        imageUrl: {\n            type: String,\n            required: true,\n            // 动态图片需要使用require()引入\n            default: require('../../../assets/images/winbg.png')\n        }\n    }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.l_1 {\n    position: relative;\n    width: 100%;\n    height: auto;\n    padding: 1vw 1.3vw;\n    padding-bottom: -6vw;\n    margin-bottom: 1vw;\n    background: url('../../../assets/images/titleBG_5.svg') center top no-repeat;\n    background-size: contain;\n    border: 1px solid;\n    border-image: linear-gradient(180deg, rgba(0, 255, 255, 0.5) 0%, #00bbf2 20%, rgba(0, 255, 255, 0.1) 100%)2 2 2 2;\n}\n\n.bg-image {\n    width: 100%;\n    height: 100%;\n}\n</style>\n\n//父组件这样使用：\n<winSub :imageUrl=\"imageUrl\">\n\ndata() {\n        return {\n            imageUrl: require('../../../assets/images/otherbg.png')\n        };\n    },"
        },
        {
          "label": "Fragment 2",
          "language": "plain_text",
          "value": "父组件这样使用：\n<winSub :imageUrl=\"imageUrl\"><winSub>"
        }
      ],
      "id": "VHTMKWuu",
      "createdAt": 1678105521667,
      "updatedAt": 1678170415523
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "-fio_qG6",
      "tagsIds": [],
      "description": null,
      "name": "Untitled snippet",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "<template>\n    <div>\n        <div class=\"bg-image\" :style=\"{ backgroundImage: 'url(' + imageUrl + ')' }\">\n            <div class=\"l_1\">\n                <slot>默认值</slot>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    name: 'DynamicBgImage',\n    props: {\n        imageUrl: {\n            type: String,\n            required: true,\n            // 动态图片需要使用require()引入，这个是默认的一张图，其他页面可以自定义其他图\n            default: require('../../../assets/images/winbg.png')\n        }\n    }\n}\n</script>\n\n<style lang=\"less\" scoped>\n.l_1 {\n    position: relative;\n    width: 100%;\n    height: auto;\n    padding: 1vw 1.3vw;\n    padding-bottom: -6vw;\n    margin-bottom: 1vw;\n    background: url('../../../assets/images/titleBG_5.svg') center top no-repeat;\n    background-size: contain;\n    border: 1px solid;\n    border-image: linear-gradient(180deg, rgba(0, 255, 255, 0.5) 0%, #00bbf2 20%, rgba(0, 255, 255, 0.1) 100%)2 2 2 2;\n}\n\n.bg-image {\n    width: 100%;\n    height: 100%;\n    background-size: cover;\n}\n</style>"
        }
      ],
      "id": "A0d0Z27C",
      "createdAt": 1678105616625,
      "updatedAt": 1678105623646
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [
        "gtzXOkAc",
        "VeWisvfJ"
      ],
      "description": null,
      "name": "dom 操作",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "用closet()查找特定祖先元素 语法：element.closest(selector) 是搭配事件代理常用的dom方法;\nconst myElement = document.querySelector('#my-element');\nconst closestDiv = myElement.closest('div');\n/*上面的代码将查找 ID 为 my-element 的元素的最近祖先 div 元素，如果找到则将其赋值给变量 closestDiv。\n如果没有找到，则 closestDiv 的值为 null。closest 方法可以方便地在DOM树中查找元素的祖先元素，\n特别是在需要找到指定元素的父级或更高层次的祖先元素时，它会非常有用。*/\n\n 用 children 获取所有sibling element\n//[...h1.parentElement.children] 将类数组转为数组\n//注意children可以获取所有子元素，思路是先到parentElement\n[...h1.parentElement.children].forEach(function (el){\n    if (el !== h1) el.style.transform = 'scale(0.5)';\n})\n\n//++++++++++++++++++++++++++++++++++++++++++++++++++ Tabbed component Tab 页切换 +++++++++++++++++++++++\n/*实现核心就是添加或去除class样式，下面案例重点：\n1) 代理的应用，就是通过父元素给下面所有子元素添加了事件监听\n2) dom元素dataset的使用：使用dataset元素可以方便地访问和修改HTML元素的自定义属性。它也可以为JavaScript应用程序提供一种简单的方法来存储额外的信息。要使用dataset元素，您需要在HTML元素上添加属性，并将其前缀“data-”。例如，要添加一个名为“color”的属性，您可以使用data-color属性，如下所示：<div data-color=\"blue\">。然后，您可以使用JavaScript来访问这个属性，如下所示：var color = element.dataset.color;\n3) if (!clicked) return; 条件不成立立即结束执行，不执行下面程序，否则报错\n4) 通过closest()操作定位dom,配合事件代理的完成\n5)使用 forEach()方法对高亮元素的操作\n*/\n\ntabsContainer.addEventListener('click', function (e) {\n  const clicked = e.target.closest('.operations__tab');\n\n  // Guard clause\n  if (!clicked) return;\n\n  // Remove active classes\n  tabs.forEach(t => t.classList.remove('operations__tab--active'));\n  tabsContent.forEach(c => c.classList.remove('operations__content--active'));\n\n  // Activate tab\n  clicked.classList.add('operations__tab--active');\n\n  // Activate content area\n  document\n    .querySelector(`.operations__content--${clicked.dataset.tab}`)\n    .classList.add('operations__content--active');\n});"
        }
      ],
      "id": "XEhy6_vs",
      "createdAt": 1678188833239,
      "updatedAt": 1678283187095
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "3BVGYMMN",
      "tagsIds": [],
      "description": null,
      "name": "渐变外边框",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "    border: 1px solid;\n    border-image: linear-gradient(180deg, rgba(0, 255, 255, 0.5) 0%, #00bbf2 20%, rgba(0, 255, 255, 0.1) 100%)2 2 2 2;"
        }
      ],
      "id": "nhDqQdnw",
      "createdAt": 1678189084177,
      "updatedAt": 1678189113611
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "3BVGYMMN",
      "tagsIds": [],
      "description": null,
      "name": "css下划线",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "background-image: linear-gradient(90deg,#fae54d 0,#fae54d);\nbackground-position: left bottom 20%;\nbackground-repeat: repeat-x;\nbackground-size: 1px 4px;"
        }
      ],
      "id": "-n8mNroq",
      "createdAt": 1678189122456,
      "updatedAt": 1678189150375
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "-fio_qG6",
      "tagsIds": [],
      "description": null,
      "name": "Untitled snippet",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "<template>\n  <div class=\"main-well\">\n    <div class=\"line\"></div>\n    <slot></slot>\n    <span class=\"left-top\"></span>\n    <span class=\"right-top\"></span>\n    <span class=\"left-bottom\"></span>\n    <span class=\"right-bottom\"></span>\n    <div class=\"line_bottom\"></div>\n  </div>\n</template>\n\n<style lang=\"less\" scoped>\n.line,\n.line_bottom {\n  background-image: linear-gradient(90deg, rgba(237, 240, 244, 0.00) 11%, #EEF1F5 35%, #EEF1F5 64%, rgba(238, 241, 243, 0.00) 86%);\n  width: 90%;\n  height: 1px;\n  position: absolute;\n  top: -1px;\n  left: 10%;\n}\n\n.line_bottom {\n  top: unset;\n  bottom: -1px;\n}\n\n.main-well {\n  position: relative;\n  padding: 20px;\n  padding-top: 15px;\n\n  background: url('../assets/images/line.png'),\n    linear-gradient(to bottom,\n      rgba(0, 13, 74, .7) 0,\n      rgba(0, 13, 74, .7) 20%,\n      rgba(19, 36, 98, .7) 40%,\n      rgba(19, 36, 98, .7) 80%,\n      rgba(19, 36, 98, .7) 100%);\n\n  // box-sizing: border-box;\n  // background-size: 100% auto;\n  width: 100%;\n  border: 1px solid rgb(21, 47, 119);\n\n  .left-top,\n  .right-top,\n  .left-bottom,\n  .right-bottom {\n    position: absolute;\n    width: 8px;\n    height: 8px;\n  }\n\n  .left-top {\n    left: 0;\n    top: 0;\n    border-left: solid 2px #02a6b5;\n    border-top: solid 2px #02a6b5;\n  }\n\n  .right-top {\n    right: 0;\n    top: 0;\n    border-right: solid 2px #02a6b5;\n    border-top: solid 2px #02a6b5;\n  }\n\n  .left-bottom {\n    left: 0;\n    bottom: 0;\n    border-left: solid 2px #02a6b5;\n    border-bottom: solid 2px #02a6b5;\n  }\n\n  .right-bottom {\n    right: 0;\n    bottom: 0;\n    border-right: solid 2px #02a6b5;\n    border-bottom: solid 2px #02a6b5;\n  }\n}\n</style>"
        }
      ],
      "id": "2POU4Tjx",
      "createdAt": 1678258120365,
      "updatedAt": 1678258191535
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "-fio_qG6",
      "tagsIds": [],
      "description": "上下两边带闪光线条，四个角带包边的窗口组件，引跑多个项目有使用",
      "name": "窗口组件",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "<template>\n  <div class=\"main-well\">\n    <div class=\"line\"></div>\n    <slot></slot>\n    <span class=\"left-top\"></span>\n    <span class=\"right-top\"></span>\n    <span class=\"left-bottom\"></span>\n    <span class=\"right-bottom\"></span>\n    <div class=\"line_bottom\"></div>\n  </div>\n</template>\n\n<style lang=\"less\" scoped>\n.line,\n.line_bottom {\n  background-image: linear-gradient(90deg, rgba(237, 240, 244, 0.00) 11%, #EEF1F5 35%, #EEF1F5 64%, rgba(238, 241, 243, 0.00) 86%);\n  width: 90%;\n  height: 1px;\n  position: absolute;\n  top: -1px;\n  left: 10%;\n}\n\n.line_bottom {\n  top: unset;\n  bottom: -1px;\n}\n\n.main-well {\n  position: relative;\n  padding: 20px;\n  padding-top: 15px;\n\n  background: url('../assets/images/line.png'),\n    linear-gradient(to bottom,\n      rgba(0, 13, 74, .7) 0,\n      rgba(0, 13, 74, .7) 20%,\n      rgba(19, 36, 98, .7) 40%,\n      rgba(19, 36, 98, .7) 80%,\n      rgba(19, 36, 98, .7) 100%);\n\n  // box-sizing: border-box;\n  // background-size: 100% auto;\n  width: 100%;\n  border: 1px solid rgb(21, 47, 119);\n\n  .left-top,\n  .right-top,\n  .left-bottom,\n  .right-bottom {\n    position: absolute;\n    width: 8px;\n    height: 8px;\n  }\n\n  .left-top {\n    left: 0;\n    top: 0;\n    border-left: solid 2px #02a6b5;\n    border-top: solid 2px #02a6b5;\n  }\n\n  .right-top {\n    right: 0;\n    top: 0;\n    border-right: solid 2px #02a6b5;\n    border-top: solid 2px #02a6b5;\n  }\n\n  .left-bottom {\n    left: 0;\n    bottom: 0;\n    border-left: solid 2px #02a6b5;\n    border-bottom: solid 2px #02a6b5;\n  }\n\n  .right-bottom {\n    right: 0;\n    bottom: 0;\n    border-right: solid 2px #02a6b5;\n    border-bottom: solid 2px #02a6b5;\n  }\n}\n</style>"
        }
      ],
      "id": "yKVDWGcB",
      "createdAt": 1678258135677,
      "updatedAt": 1678975223527
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "3BVGYMMN",
      "tagsIds": [],
      "description": "这个可以应用在窗口的上下两边",
      "name": "发光线条",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//应用 <div class='line'>\n\n.line,\n.line_bottom {\n  background-image: linear-gradient(90deg, rgba(237, 240, 244, 0.00) 11%, #EEF1F5 35%, #EEF1F5 64%, rgba(238, 241, 243, 0.00) 86%);\n  width: 90%;\n  height: 1px;\n  position: absolute;\n  top: -1px;\n  left: 10%;\n}\n\n.line_bottom {\n  top: unset;\n  bottom: -1px;\n}"
        }
      ],
      "id": "Qh9k1XS5",
      "createdAt": 1678258252252,
      "updatedAt": 1678258600130
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Untitled snippet",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": ""
        }
      ],
      "id": "Qr3iIz4m",
      "createdAt": 1678337087185,
      "updatedAt": 1678337087185
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Intersection Observer API",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "/*\nIntersection Observer API是一种在网页中监听元素是否进入或离开视口的JavaScript API。它允许我们异步地观察单个或多个DOM元素，以了解它们的交叉状态。\n使用Intersection Observer API可以实现许多有用的功能，例如：\n延迟加载图像和视频。\n无限滚动和分页。\n监听广告的显示和隐藏。\n视觉上显示元素的动画效果。\n该API通过IntersectionObserver类和IntersectionObserverEntry类实现。IntersectionObserver类用于创建一个观察器实例，该实例可以通过observe()方法观察指定的元素。IntersectionObserverEntry用于记录元素的交叉状态，包括交叉比例和交叉矩形等。\n以下是一个简单的例子，用于观察一个元素是否进入视口：*/\n// 创建一个IntersectionObserver实例\nconst observer = new IntersectionObserver((entries) => {\n  entries.forEach((entry) => {\n    if (entry.isIntersecting) {\n      console.log('Element is visible in the viewport');\n    } else {\n      console.log('Element is hidden in the viewport');\n    }\n  });\n});\n\n// 观察指定的DOM元素\nobserver.observe(document.querySelector('#target-element'));\n//在这个例子中，我们创建了一个IntersectionObserver实例，使用observe()方法观察一个元素，当元素进入或离开视口时，触发回调函数并打印相应的消息。"
        }
      ],
      "id": "PkpyJalX",
      "createdAt": 1678340645588,
      "updatedAt": 1678340765582
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "3BVGYMMN",
      "tagsIds": [],
      "description": null,
      "name": "Untitled snippet",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "[data-src]')\nconst imgTargets = document.querySelectorAll('img"
        }
      ],
      "id": "Wjh3Yjlm",
      "createdAt": 1678359540750,
      "updatedAt": 1678359543134
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "3BVGYMMN",
      "tagsIds": [],
      "description": null,
      "name": "属性选择",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "\nconst imgTargets = document.querySelectorAll('img[data-src]')"
        }
      ],
      "id": "eLvZiojw",
      "createdAt": 1678359553335,
      "updatedAt": 1678359636115
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "CommonJs",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//在 Nodejs 环境中，默认就支持模块系统，该模块系统遵循 CommonJS 规范\n//在 Nodejs 中一个 js 文件就是一个模块\n\n// index.js\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction minus(a, b) {\n  return a - b;\n}\n\n// 导出单个\nmodule.exports = add;\n// 在别的文件引入\nconst add = require(\"index.js\");\n\n// 导出多个\nmodule.exports = {\n  add,\n  minus\n};\n// 在别的文件引入\nconst { add, minus } = require(\"index.js\");\n\n// 直接引入npm包\nconst _ = require(\"lodash\");"
        }
      ],
      "id": "1xLS6cwD",
      "createdAt": 1678364181946,
      "updatedAt": 1678364238735
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "kYeA3Yuv",
      "tagsIds": [],
      "description": null,
      "name": "Untitled snippet",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "<template>\n<el-carousel ref=\"carousel\" :interval=\"4000\" type=\"card\" height=\"16vw\" width=\"20vw\" :autoplay=\"true\" :loop=\"true\" arrow=\"always\">\n<el-carousel-item v-for=\"(item, index) in headline\" :key=\"item.id\" :title=\"item.title\">\n<el-image class=\"main-image\" :src=\"item.file\" fit=\"fill\" @mouseenter=\"setActiveDebounced(index)\" @mouseleave=\"setActive(activeIndex)\"></el-image>\n<h3 class=\"bottom\" style=\"color:white\">{{ item.title }}</h3>\n</el-carousel-item>\n</el-carousel>\n</template>\n\n<script>\nexport default {\ndata() {\nreturn {\nactiveIndex: 0\n}\n},\nmethods: {\nsetActive(index) {\nthis.activeIndex = index;\nthis.$refs.carousel.setActiveItem(this.activeIndex);\n},\nsetActiveDebounced(fn, delay) {\nlet timerId;\nreturn function (...args) {\nif (timerId) {\nclearTimeout(timerId);\n}\ntimerId = setTimeout(() => {\nfn.apply(this, args);\ntimerId = null;\n}, delay);\n};\n},\nsetActiveDebounced: function(index) {\nthis.setActiveDebounced(this.setActive, 1000)(index);\n}\n}\n}\n</script>"
        }
      ],
      "id": "YtQR_lzz",
      "createdAt": 1678621296242,
      "updatedAt": 1679132289379
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": "这个鼠标事件是chatgpt给的方案，可用！",
      "name": "轮播图加鼠标切换事件",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "/*\n这段代码是一个基于Element UI的轮播组件，展示了一个滑动的图片列表。代码中的 el-carousel 组件是整个轮播的容器，通过设置不同的属性来控制轮播的效果。其中，interval 属性指定了轮播的间隔时间，type 属性指定了轮播的类型（这里是卡片式的轮播），height 和 width 属性指定了轮播容器的高度和宽度，autoplay 属性指定了是否自动播放，loop 属性指定了是否循环播放。\n\n在 el-carousel 组件中，每个轮播项使用 el-carousel-item 组件来表示，通过 v-for 指令循环渲染出图片列表中的每一项，并通过 @click.native 事件监听用户的点击操作。每个轮播项中包含了一张图片和一个标题，图片使用 el-image 组件来展示，通过设置 :src 属性来指定图片的路径，标题则使用 h3 标签进行展示。\n\n在 script 标签中，代码定义了一个名为 setActive 的方法，用于设置当前活动项的索引。在 data 中定义了一个名为 activeIndex 的变量，用于保存当前活动项的索引。当用户鼠标悬停在某个轮播项上时，会触发 @mouseenter 事件，调用 setActive 方法并传入该项的索引值，从而实现高亮该项。当鼠标移开时，会触发 @mouseleave 事件，调用 setActive 方法并传入当前活动项的索引值，从而取消高亮该项。\n\n在 setActive 方法中，代码使用 setTimeout 函数来实现延迟执行，当用户在400毫秒内多次悬停在不同的轮播项上时，只有最后一次悬停的项会被高亮显示。同时，代码通过 $refs 属性获取了 el-carousel 组件的引用，并调用其 setActiveItem 方法来设置当前活动项的索引值，从而实现滑动到对应的轮播项。\n\n总体来说，这段代码通过使用Element UI提供的轮播组件和事件监听机制，实现了一个简单的图片轮播效果，并且还实现了一些用户体验优化，例如延迟高亮和滑动到对应项等功能。*/\n<template>\n    <el-carousel ref=\"carousel\" :interval=\"2500\" type=\"card\" height=\"16vw\" width=\"20vw\" :autoplay=\"true\" :loop=\"true\">\n        <el-carousel-item v-for=\"(item, index) in headline\" :key=\"item.id\" :title=\"item.title\"\n            @click.native=\"clickCarousel(item)\">\n            <el-image class=\"main-image\" :src=\"item.file\" fit=\"fill\" @mouseenter=\"setActive(index)\"\n                @mouseleave=\"setActive(activeIndex)\"></el-image>\n            <h3 class=\"bottom\" style=\"color:white\">{{ item.title }}</h3>\n        </el-carousel-item>\n    </el-carousel>\n</template>\n    \n<script>\nexport default {\n    data() {\n        return {\n            activeIndex: 0\n        }\n    },\n    methods: {\n        setActive(index) {\n            clearTimeout(this.timer);\n            this.timer = setTimeout(() => {\n                this.activeIndex = index;\n                this.$refs.carousel.setActiveItem(this.activeIndex);\n            }, 400);\n        }\n    }\n}\n</script>\n<style lang=\"less\">\n/deep/.el-carousel {\n    .el-carousel__item {\n        h3 {\n            position: absolute;\n            bottom: .5vw;\n            // right: 2vw;\n            left: 50%;\n            transform: translateX(-50%);\n            color: #fff;\n            font-size: 1vw;\n            line-height: 1.2vw;\n            margin: 0;\n            padding: .2vw;\n            background-color: rgba(0, 0, 0, 0.2);\n            border-radius: 4px;\n        }\n    }\n\n    .el-carousel__arrow {\n        background-color: rgba(31, 45, 61, .4);\n        font-size: 1.5vw;\n    }\n\n    .el-carousel__indicators--outside button {\n        margin-top: .7vw;\n        background-color: yellow;\n        height: .2vw;\n        width: 3.6vw;\n        border-radius: 3px;\n\n    }\n}\n</style>"
        }
      ],
      "id": "Gb1GwSta",
      "createdAt": 1678621301490,
      "updatedAt": 1678709390338
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "kYeA3Yuv",
      "tagsIds": [
        "fyros3t1",
        "tqUZ3fHJ",
        "fDPIALBe",
        "cH71p1QA",
        "y6nX0FDZ"
      ],
      "description": "这个轮播图是对el-carousel的改造，添加了鼠标在两侧的mouseenter后的交互效果",
      "name": "el-carousel",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "<template>\n    <el-carousel ref=\"carousel\" :interval=\"2500\" type=\"card\" height=\"16vw\" width=\"20vw\" :autoplay=\"true\" :loop=\"true\">\n        <el-carousel-item v-for=\"(item, index) in headline\" :key=\"item.id\" :title=\"item.title\"\n            @click.native=\"clickCarousel(item)\">\n            <el-image style=\"width:100%; height:100%\" :src=\"item.file\" fit=\"fill\" @mouseenter=\"setActive(index)\"\n                @mouseleave=\"setActive(activeIndex)\"></el-image>\n            <h3 class=\"bottom\" style=\"color:white\">{{ item.title }}</h3>\n        </el-carousel-item>\n    </el-carousel>\n</template>\n    \n<script>\nexport default {\n    data() {\n        return {\n            activeIndex: 0\n        }\n    },\n    methods: {\n        setActive(index) {\n            clearTimeout(this.timer); //注意这里的用法，先清除再set\n            this.timer = setTimeout(() => {\n                this.activeIndex = index;\n                this.$refs.carousel.setActiveItem(this.activeIndex);\n            }, 400);\n        }\n    }\n}\n</script>\n<style lang=\"less\">\n/deep/.el-carousel {\n    .el-carousel__item {\n        h3 {\n            position: absolute;\n            bottom: .5vw;\n            // right: 2vw;\n            left: 50%;\n            transform: translateX(-50%);\n            color: #fff;\n            font-size: 1vw;\n            line-height: 1.2vw;\n            margin: 0;\n            padding: .2vw;\n            background-color: rgba(0, 0, 0, 0.2);\n            border-radius: 4px;\n        }\n    }\n\n    .el-carousel__arrow {\n        background-color: rgba(31, 45, 61, .4);\n        font-size: 1.5vw;\n    }\n\n    .el-carousel__indicators--outside button {\n        margin-top: .7vw;\n        background-color: yellow;\n        height: .2vw;\n        width: 3.6vw;\n        border-radius: 3px;\n\n    }\n}\n</style>"
        }
      ],
      "id": "dt-NnWPp",
      "createdAt": 1678709326248,
      "updatedAt": 1678975072282
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [
        "vJCQ8FoN"
      ],
      "description": null,
      "name": "Object.prototype",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "here we can add any new method to this prototype and all the arrays will then inherit it.\nwe want to create a method which returns all the unique elements of an array，so we can then call\nthat method on any array that we want,but in practice you probably not do it  \n\nconst arr = [3，6， 5.6，9，3]; // 这种创建数组的方式实际就是： new Array === [] \nArray.prototype.unique = function () {return [...new Set(this)];\nconsole.log(arr.unique());\n\n// what's the point is that this 'from method' here is really a method that is attached to \nArray.from(document.querySelectorAll('h1'))"
        }
      ],
      "id": "p0bXd3RW",
      "createdAt": 1678843214690,
      "updatedAt": 1679061380488
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "-fio_qG6",
      "tagsIds": [],
      "description": null,
      "name": "通过 :style 动态样式实现颜色变换",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "<template>\n  <div :style=\"{ color: textColor }\">\n    {{ text }}\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      text: 'Hello, world!',\n      textColor: 'red'\n    };\n  },\n  mounted() {\n    // 在mounted钩子函数中，修改textColor的值，触发样式的更新\n    setInterval(() => {\n      this.textColor = this.textColor === 'red' ? 'blue' : 'red';\n    }, 1000);\n  }\n};\n</script>"
        }
      ],
      "id": "Dxnd96bQ",
      "createdAt": 1678954152248,
      "updatedAt": 1678974450267
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "Untitled snippet",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": ""
        }
      ],
      "id": "j4HTUJgQ",
      "createdAt": 1679060835539,
      "updatedAt": 1679132256288
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [],
      "description": null,
      "name": "JS Class",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "//JS classes are really just a layer of obstruction over constructor functions\n    //在构造函数里需要 PersonCl.call()，而class里只需要super()\n    //super is basically the constructor function of the parent class\n    //We don't need to specify the name of the parent class again,而 PersonCl.call()里需要\n    //in super() pass in the arguments for the constructor of the parent class.\n\n//keyword extends link to PersonCl prototypes behind the scenes\nclass StudentCl extends PersonCl {\n  constructor(fullName, birthYear, course){  \n    // Always needs to happen first! then be able to access the 'this' keyword\n    super(fullName, birthYear){\n      this.course =course; //this is not necessary\n    }\n    \n    calcAge(){\n      //子对象和父对象的同名方法会覆盖父对象的方法，因为原型链先到达子对象，这个就是对象4大支柱之一的‘多态’\n    }\n}\n\nconst martha = new StudentCl( 'Martha Jones'，2012,'computer science');\n\nconst martha = new StudentCl( 'Martha Jones'，2012);\n//如果像上面一行child里没有新的属性，和父对象一样的属性，那么class里不用写 constructor(),只要extends即可"
        }
      ],
      "id": "OPVIGMkU",
      "createdAt": 1679132391010,
      "updatedAt": 1679145808749
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "y-C8x3sP",
      "tagsIds": [
        "z_vLdu5R",
        "sUpoZMyz",
        "BRz1KFJ-",
        "AruGwEwj",
        "RfO7-oVw",
        "4DWwUyl3",
        "AI8yBMyD"
      ],
      "description": null,
      "name": "JS OOP",
      "content": [
        {
          "label": "Fragment 1",
          "language": "javascript",
          "value": "///////////////////////////////////////\n// Constructor Functions and the new Operator\nconst Person = function (firstName, birthYear) {\n  // Instance properties\n  this.firstName = firstName;\n  this.birthYear = birthYear;\n  // Never to this!\n  // this.calcAge = function () {\n  //   console.log(2037 - this.birthYear);\n  // };\n};\nconst jonas = new Person('Jonas', 1991);\nconsole.log(jonas);\n\n// 1. New {} is created\n// 2. function is called, this = {}\n// 3. {} linked to prototype\n// 4. function automatically return {}\n\nconsole.log(jonas instanceof Person);  //true\n\n\n///////////////////////////////////////\n// Prototypes\nconsole.log(Person.prototype);\n\nPerson.prototype.calcAge = function () {\n  console.log(2037 - this.birthYear);\n};\njonas.calcAge();\nmatilda.calcAge();\n\nconsole.log(jonas.__proto__);\nconsole.log(jonas.__proto__ === Person.prototype); //true\n\nconsole.log(Person.prototype.isPrototypeOf(jonas));//true\nconsole.log(Person.prototype.isPrototypeOf(matilda));//true\n\nconsole.log(Person.prototype.isPrototypeOf(Person));//false\n// Person.prototype.isPrototypeOf(matilda)是false, 这里的.prototype 更确切的说是.prototyeOfLinkedObjects\n\nPerson.prototype.species = 'Homo Sapiens';\nconsole.log(jonas.species, matilda.species);//Homo Sapiens Homo Sapiens\n\nconsole.log(jonas.hasOwnProperty('firstName'));//true\nconsole.log(jonas.hasOwnProperty('species'));//false\n\n///////////////////////////////////////\n// Use a constructor function to implement a Car\nconst Car = function (make, speed) {\n  this.make = make;\n  this.speed = speed;\n};\nCar.prototype.accelerate = function () {\n  this.speed += 10;\n  console.log(`${this.make} is going at ${this.speed} km/h`);\n};\nCar.prototype.brake = function () {\n  this.speed -= 5;\n  console.log(`${this.make} is going at ${this.speed} km/h`);\n};\nconst bmw = new Car('BMW', 120);\nconst mercedes = new Car('Mercedes', 95);\n\nbmw.accelerate();\nbmw.accelerate();\nbmw.brake();\nbmw.accelerate();\n\n///////////////////////////////////////\n// ES6 Classes\n// Class expression\n// const PersonCl = class {}\n\n// Class declaration\nclass PersonCl {\n  constructor(fullName, birthYear) {\n    this.fullName = fullName;\n    this.birthYear = birthYear;\n  }\n  // Instance methods\n  // Methods will be added to .prototype property,这里是包装过的，不用像在构造函数那样显示的写出.prototype\n  calcAge() {\n    console.log(2037 - this.birthYear);\n  }\n  greet() {\n    console.log(`Hey ${this.fullName}`);\n  }\n  get age() { //get和set可以像访问属性一样使用，是对现有属性的再加工\n    return 2037 - this.birthYear;\n  }\n  // Set a property that already exists\n  set fullName(name) {\n    if (name.includes(' ')) this._fullName = name; //_fullName 是避免同名的惯例写法\n    else alert(`${name} is not a full name!`);\n  }\n  get fullName() {\n    return this._fullName;\n  }\n  // Static method\n  static hey() {\n    console.log('Hey there 👋');\n    console.log(this);\n  }\n}\n\nconst jessica = new PersonCl('Jessica Davis', 1996);\nconsole.log(jessica);\njessica.calcAge(); //41\nconsole.log(jessica.age); //41\nconsole.log(jessica.__proto__ === PersonCl.prototype); //true\n\n//构造函数要这样写比较麻烦，所以ES6的class写法很多人会使用，虽然是伪代码\n// PersonCl.prototype.greet = function () {\n//   console.log(`Hey ${this.firstName}`);\n// };\njessica.greet();\n\n// 1. Classes are NOT hoisted\n// 2. Classes are first-class citizens\n// 3. Classes are executed in strict mode\n\n///////////////////////////////////////\n// Setters and Getters\nconst account = {\n  owner: 'Jonas',\n  movements: [200, 530, 120, 300],\n  get latest() {\n    //slice(-1)返回最后一个子数组不会改变原数组，而pop从数组中删除并返回最后一个元素\n    return this.movements.slice(-1).pop();\n  },\n  set latest(mov) {\n    this.movements.push(mov);\n  },\n};\nconsole.log(account.latest);\naccount.latest = 50;\nconsole.log(account.movements);\n\n///////////////////////////////////////\n// Object.create\nconst PersonProto = {\n  calcAge() {\n    console.log(2037 - this.birthYear);\n  },\n  init(firstName, birthYear) {\n    this.firstName = firstName;\n    this.birthYear = birthYear;\n  },\n};\n\nconst steven = Object.create(PersonProto);\nconsole.log(steven); //输出一个有calcAg方法和init属性的空对象\nsteven.name = 'Steven';\nsteven.birthYear = 2002;\nsteven.calcAge();\nconsole.log(steven.__proto__ === PersonProto);//true\nconst sarah = Object.create(PersonProto);\nsarah.init('Sarah', 1979);\nsarah.calcAge();\n\n///////////////////////////////////////\n// Coding Challenge #2\n//Re-create challenge 1, but this time using an ES6 class\nclass CarCl {\n  constructor(make, speed) {\n    this.make = make;\n    this.speed = speed;\n  }\n  accelerate() {\n    this.speed += 10;\n    console.log(`${this.make} is going at ${this.speed} km/h`);\n  }\n  brake() {\n    this.speed -= 5;\n    console.log(`${this.make} is going at ${this.speed} km/h`);\n  }\n  get speedUS() {\n    return this.speed / 1.6;\n  }\n  set speedUS(speed) {\n    this.speed = speed * 1.6;\n  }\n}\nconst ford = new CarCl('Ford', 120);\nconsole.log(ford.speedUS);\nford.accelerate();\nford.accelerate();\nford.brake();\nford.speedUS = 50;\nconsole.log(ford);\n\n///////////////////////////////////////\n// Inheritance Between \"Classes\": Constructor Functions\nconst Person = function (firstName, birthYear) {\n  this.firstName = firstName;\n  this.birthYear = birthYear;\n};\n//对象的方法不能写入构造函数，要写入原型\nPerson.prototype.calcAge = function () {\n  console.log(2037 - this.birthYear);\n};\n/*注意call方法的使用,在函数体内，我们调用了Person构造函数,并将this关键字作为第一个\n参数传递给它。这样做的目的是将Person的属性和方法添加到Student对象中,call()方法的第一个参数是this，它指定了要在其中调用Person函数的对象。这个对象是Student构造函数中的this，也就是正在创建的新学生对象。接下来的参数，即firstName和birthYear，是Person构造函数的参数。这种方式称为构造函数继承，它允许我们从一个类继承属性和方法，并在子类中添加新的属性和方法。在这个例子中，我们从Person类继承了firstName和birthYear属性，同时添加了一个新的course属性。*/\nconst Student = function (firstName, birthYear, course) {\n  Person.call(this, firstName, birthYear); //构造函数继承\n  this.course = course;\n};\n// Linking prototypes\n//在JavaScript中，每个对象都有一个原型，它是指向另一个对象的引用。原型对象上的属性和方法可以被继承到该对象上。当我们调用Object.create()方法时，我们可以将一个对象作为参数传递给它，这个对象将成为新创建对象的原型。因此，新创建的对象将继承原型对象上的属性和方法。\nStudent.prototype = Object.create(Person.prototype);\nStudent.prototype.introduce = function () {\n  console.log(`My name is ${this.firstName} and I study ${this.course}`);\n};\nconst mike = new Student('Mike', 2020, 'Computer Science');\nmike.introduce();\nmike.calcAge();\nconsole.log(mike.__proto__);\nconsole.log(mike.__proto__.__proto__);\nconsole.log(mike instanceof Student);\nconsole.log(mike instanceof Person);\nconsole.log(mike instanceof Object);\n\n//将Student的构造函数绑定到Student,因为Object.create()方法创建的对象没有constructor属性\nStudent.prototype.constructor = Student;\nconsole.dir(Student.prototype.constructor);\n\n///////////////////////////////////////\n// Coding Challenge #3\n//Use a constructor function to implement an Electric Car (called EV) as a CHILD \"class\" of Car\n\nconst Car = function (make, speed) {\n  this.make = make;\n  this.speed = speed;\n};\nCar.prototype.accelerate = function () {\n  this.speed += 10;\n  console.log(`${this.make} is going at ${this.speed} km/h`);\n};\nCar.prototype.brake = function () {\n  this.speed -= 5;\n  console.log(`${this.make} is going at ${this.speed} km/h`);\n};\nconst EV = function (make, speed, charge) {\n  Car.call(this, make, speed);\n  this.charge = charge;\n};\n// Link the prototypes\nEV.prototype = Object.create(Car.prototype);\nEV.prototype.chargeBattery = function (chargeTo) {\n  this.charge = chargeTo;\n};\nEV.prototype.accelerate = function () {\n  this.speed += 20;\n  this.charge--;\n  console.log(\n    `${this.make} is going at ${this.speed} km/h, with a charge of ${this.charge}`\n  );\n};\nconst tesla = new EV('Tesla', 120, 23);\ntesla.chargeBattery(90);\nconsole.log(tesla);\ntesla.brake();\ntesla.accelerate();\n\n///////////////////////////////////////\n// Inheritance Between \"Classes\": ES6 Classes\nclass PersonCl {\n  constructor(fullName, birthYear) {\n    this.fullName = fullName;\n    this.birthYear = birthYear;\n  }\n  // Instance methods\n  calcAge() {\n    console.log(2037 - this.birthYear);\n  }\n  greet() {\n    console.log(`Hey ${this.fullName}`);\n  }\n  get age() {\n    return 2037 - this.birthYear;\n  }\n  set fullName(name) {\n    if (name.includes(' ')) this._fullName = name;\n    else alert(`${name} is not a full name!`);\n  }\n  get fullName() {\n    return this._fullName;\n  }\n  // Static method\n  static hey() {\n    console.log('Hey there 👋');\n  }\n}\nclass StudentCl extends PersonCl {\n  constructor(fullName, birthYear, course) {\n    // Always needs to happen first! \n    super(fullName, birthYear);//这里相当于上面构造函数继承 parent.call(this，.., ..)\n    this.course = course;\n  }\n  introduce() {\n    console.log(`My name is ${this.fullName} and I study ${this.course}`);\n  }\n  calcAge() {\n    console.log(\n      `I'm ${\n        2037 - this.birthYear\n      } years old, but as a student I feel more like ${\n        2037 - this.birthYear + 10\n      }`\n    );\n  }\n}\n//下面new的对象如果和父对象参数一致，上面可以不用写constructor(),只用extends即可\nconst martha = new StudentCl('Martha Jones', 2012, 'Computer Science');\nmartha.introduce();\nmartha.calcAge();\n\n///////////////////////////////////////\n// Inheritance Between \"Classes\": Object.create\nconst PersonProto = {\n  calcAge() {\n    console.log(2037 - this.birthYear);\n  },\n  init(firstName, birthYear) {\n    this.firstName = firstName;\n    this.birthYear = birthYear;\n  },\n};\nconst steven = Object.create(PersonProto);\nconst StudentProto = Object.create(PersonProto);\nStudentProto.init = function (firstName, birthYear, course) {\n  PersonProto.init.call(this, firstName, birthYear);\n  this.course = course;\n};\nStudentProto.introduce = function () {\n  console.log(`My name is ${this.firstName} and I study ${this.course}`);\n};\nconst jay = Object.create(StudentProto);\njay.init('Jay', 2010, 'Computer Science');\njay.introduce();\njay.calcAge();"
        }
      ],
      "id": "1TLTWdlL",
      "createdAt": 1679146641540,
      "updatedAt": 1679232133244
    }
  ],
  "tags": [
    {
      "name": "加载",
      "id": "6-jXY9xe",
      "createdAt": 1677638829391,
      "updatedAt": 1677638829391
    },
    {
      "name": "它不会改变原数组，而是返回一个新数组",
      "id": "oX2m4dHL",
      "createdAt": 1677643286276,
      "updatedAt": 1677643286276
    },
    {
      "name": "类数组",
      "id": "8EChA0GN",
      "createdAt": 1677665638339,
      "updatedAt": 1677665638339
    },
    {
      "name": "奇偶数",
      "id": "VMVF-8hD",
      "createdAt": 1677665702294,
      "updatedAt": 1677665702294
    },
    {
      "name": "dom操作",
      "id": "gtzXOkAc",
      "createdAt": 1678279968558,
      "updatedAt": 1678279968558
    },
    {
      "name": "tab页",
      "id": "VeWisvfJ",
      "createdAt": 1678282529320,
      "updatedAt": 1678282529320
    },
    {
      "name": "数组去重",
      "id": "vJCQ8FoN",
      "createdAt": 1678844290405,
      "updatedAt": 1678844290405
    },
    {
      "name": "轮播图",
      "id": "fyros3t1",
      "createdAt": 1678974797126,
      "updatedAt": 1678974797126
    },
    {
      "name": "幻灯",
      "id": "tqUZ3fHJ",
      "createdAt": 1678974966076,
      "updatedAt": 1678974966076
    },
    {
      "name": "鼠标交互",
      "id": "fDPIALBe",
      "createdAt": 1678974982629,
      "updatedAt": 1678974982629
    },
    {
      "name": "setTimeout",
      "id": "cH71p1QA",
      "createdAt": 1678975008697,
      "updatedAt": 1678975008697
    },
    {
      "name": " clearTimeout",
      "id": "y6nX0FDZ",
      "createdAt": 1678975016786,
      "updatedAt": 1678975016786
    },
    {
      "name": "面向对象",
      "id": "z_vLdu5R",
      "createdAt": 1679146698916,
      "updatedAt": 1679146698916
    },
    {
      "name": "js class",
      "id": "sUpoZMyz",
      "createdAt": 1679216746292,
      "updatedAt": 1679216746292
    },
    {
      "name": "pop",
      "id": "BRz1KFJ-",
      "createdAt": 1679219962523,
      "updatedAt": 1679219962523
    },
    {
      "name": "call()",
      "id": "AruGwEwj",
      "createdAt": 1679229643496,
      "updatedAt": 1679229643496
    },
    {
      "name": "call",
      "id": "RfO7-oVw",
      "createdAt": 1679229646732,
      "updatedAt": 1679229646732
    },
    {
      "name": "改变构造函数",
      "id": "4DWwUyl3",
      "createdAt": 1679229687046,
      "updatedAt": 1679229687046
    },
    {
      "name": "Object.create",
      "id": "AI8yBMyD",
      "createdAt": 1679232133214,
      "updatedAt": 1679232133214
    }
  ]
}